(*

   Author:  prospero78su
      email:   prospero.78.su@@goooogle.com
      Company: Prospero Soft Ltd.

      Version: 000
      Date:    10.07.2017 13:21:26 Египетское время (зима)

      License: BSD-2

   Copyright (c) 2017, prospero78su

      Разрешается повторное распространение и использование как в виде исходного кода, так и в
      двоичной форме, с изменениями или без, при соблюдении следующих условий:

      1. При повторном распространении исходного кода должно оставаться указанное выше уведомление
      об авторском праве, этот список условий и последующий отказ от гарантий.
      2. При повторном распространении двоичного кода должна сохраняться указанная выше информация
      об авторском праве, этот список условий и последующий отказ от гарантий в документации и/или
      в других материалах, поставляемых при распространении.

      ЭТА ПРОГРАММА ПРЕДОСТАВЛЕНА ВЛАДЕЛЬЦАМИ АВТОРСКИХ ПРАВ И/ИЛИ ДРУГИМИ СТОРОНАМИ «КАК ОНА ЕСТЬ»
      БЕЗ КАКОГО-ЛИБО ВИДА ГАРАНТИЙ, ВЫРАЖЕННЫХ ЯВНО ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ
      ИМИ, ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ КОММЕРЧЕСКОЙ ЦЕННОСТИ И ПРИГОДНОСТИ ДЛЯ КОНКРЕТНОЙ ЦЕЛИ. НИ В КОЕМ
      СЛУЧАЕ НИ ОДИН ВЛАДЕЛЕЦ АВТОРСКИХ ПРАВ И НИ ОДНО ДРУГОЕ ЛИЦО, КОТОРОЕ МОЖЕТ ИЗМЕНЯТЬ И/ИЛИ ПОВТОРНО
      РАСПРОСТРАНЯТЬ ПРОГРАММУ, КАК БЫЛО СКАЗАНО ВЫШЕ, НЕ НЕСЁТ ОТВЕТСТВЕННОСТИ, ВКЛЮЧАЯ ЛЮБЫЕ ОБЩИЕ,
      СЛУЧАЙНЫЕ, СПЕЦИАЛЬНЫЕ ИЛИ ПОСЛЕДОВАВШИЕ УБЫТКИ, ВСЛЕДСТВИЕ ИСПОЛЬЗОВАНИЯ ИЛИ НЕВОЗМОЖНОСТИ
      ИСПОЛЬЗОВАНИЯ ПРОГРАММЫ (ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ПОТЕРЕЙ ДАННЫХ, ИЛИ ДАННЫМИ, СТАВШИМИ
      НЕПРАВИЛЬНЫМИ, ИЛИ ПОТЕРЯМИ ПРИНЕСЕННЫМИ ИЗ-ЗА ВАС ИЛИ ТРЕТЬИХ ЛИЦ, ИЛИ ОТКАЗОМ ПРОГРАММЫ РАБОТАТЬ
      СОВМЕСТНО С ДРУГИМИ ПРОГРАММАМИ), ДАЖЕ ЕСЛИ ТАКОЙ ВЛАДЕЛЕЦ ИЛИ ДРУГОЕ ЛИЦО БЫЛИ ИЗВЕЩЕНЫ О
      ВОЗМОЖНОСТИ ТАКИХ УБЫТКОВ.

   Модуль является прокладкой между рулём и сиденьем для разных типов ассемблеров.
   *)

МОДУЛЬ модАсм;

ИМПОРТ мАсмИ32 := модАсмИнтел32,
   мСтр := модСтроки,
   мКонст := модКонстанты,
   mSys := SYSTEM,
   мЗвСущ := модЗвеноСущ;

ТИПЫ
   туАсм = УКАЗАТЕЛЬ НА ЗАПИСЬ
         цТип: ЦЕЛОЕ
      КОНЕЦ;

ПЕРЕМ
   уАсм*: туАсм;


ПРОЦЕДУРА setfelf*(name: мСтр.тСтрока);
   НАЧАЛО
      ЕСЛИ уАсм.цТип = мКонст.асмИ32 ТОГДА
         мАсмИ32.setfelf(name)
      КОНЕЦ;
   КОНЕЦ setfelf;

ПРОЦЕДУРА AddRtlProc*(idx, proc: ЦЕЛОЕ);
   НАЧАЛО
      ЕСЛИ уАсм.цТип = мКонст.асмИ32 ТОГДА
         мАсмИ32.AddRtlProc(idx, proc)
      КОНЕЦ;
   КОНЕЦ AddRtlProc;

ПРОЦЕДУРА ProcExport*(Number: ЦЕЛОЕ; уЗвеноСущ_: мЗвСущ.туЗвеноСущ; NameLabel: ЦЕЛОЕ);
   НАЧАЛО
      ЕСЛИ уАсм.цТип = мКонст.асмИ32 ТОГДА
         мАсмИ32.ProcExport(Number, уЗвеноСущ_, NameLabel)
      КОНЕЦ;
   КОНЕЦ ProcExport;

ПРОЦЕДУРА Align*(n, m: ЦЕЛОЕ): ЦЕЛОЕ;
   ПЕРЕМ
      цВыход : ЦЕЛОЕ;
   НАЧАЛО
      ЕСЛИ уАсм.цТип = мКонст.асмИ32 ТОГДА
         цВыход := мАсмИ32.Align(n, m)
      КОНЕЦ;
      ВЕРНУТЬ цВыход
   КОНЕЦ Align;

ПРОЦЕДУРА Param*;
   НАЧАЛО
      ЕСЛИ уАсм.цТип = мКонст.асмИ32 ТОГДА
         мАсмИ32.Param
      КОНЕЦ;
   КОНЕЦ Param;

ПРОЦЕДУРА Вызов_Закончить*;
  НАЧАЛО
      ЕСЛИ уАсм.цТип = мКонст.асмИ32 ТОГДА
         мАсмИ32.Вызов_Закончить
      КОНЕЦ;
  КОНЕЦ Вызов_Закончить;

ПРОЦЕДУРА Настроить*(mem: мАсмИ32.тПроцедура; UI: ЦЕЛОЕ);
   НАЧАЛО
      ЕСЛИ уАсм.цТип = мКонст.асмИ32 ТОГДА
         мАсмИ32.Настроить(mem, UI)
      КОНЕЦ;
   КОНЕЦ Настроить;

ПРОЦЕДУРА jmp*(jamp: ЛИТ; label: ЦЕЛОЕ);
   НАЧАЛО
      ЕСЛИ уАсм.цТип = мКонст.асмИ32 ТОГДА
         мАсмИ32.jmp(jamp, label)
      КОНЕЦ;
   КОНЕЦ jmp;

ПРОЦЕДУРА Label*(label: ЦЕЛОЕ);
  НАЧАЛО
      ЕСЛИ уАсм.цТип = мКонст.асмИ32 ТОГДА
         мАсмИ32.Label(label)
      КОНЕЦ;
  КОНЕЦ Label;

ПРОЦЕДУРА DropFpu*(long: БУЛЕВО);
   НАЧАЛО
      ЕСЛИ уАсм.цТип = мКонст.асмИ32 ТОГДА
         мАсмИ32.DropFpu(long)
      КОНЕЦ;
   КОНЕЦ DropFpu;

ПРОЦЕДУРА Call*(proc: ЦЕЛОЕ; func, float: БУЛЕВО; callconv, ccall, bases, level, parsize, local: ЦЕЛОЕ);
   НАЧАЛО
      ЕСЛИ уАсм.цТип = мКонст.асмИ32 ТОГДА
         мАсмИ32.Call(proc, func, float, callconv, ccall, bases, level, parsize, local)
      КОНЕЦ;
   КОНЕЦ Call;

ПРОЦЕДУРА PushInt*(n: ЦЕЛОЕ);
  НАЧАЛО
      ЕСЛИ уАсм.цТип = мКонст.асмИ32 ТОГДА
         мАсмИ32.PushInt(n)
      КОНЕЦ;
  КОНЕЦ PushInt;

ПРОЦЕДУРА Prolog*(exename: мСтр.тСтрока);
   НАЧАЛО
      ЕСЛИ уАсм.цТип = мКонст.асмИ32 ТОГДА
         мАсмИ32.Prolog(exename)
      КОНЕЦ;
   КОНЕЦ Prolog;

ПРОЦЕДУРА AddRec*(base: ЦЕЛОЕ);
   НАЧАЛО
      ЕСЛИ уАсм.цТип = мКонст.асмИ32 ТОГДА
         мАсмИ32.AddRec(base)
      КОНЕЦ;
   КОНЕЦ AddRec;

ПРОЦЕДУРА ifwh*(L: ЦЕЛОЕ);
   НАЧАЛО
      ЕСЛИ уАсм.цТип = мКонст.асмИ32 ТОГДА
         мАсмИ32.ifwh(L)
      КОНЕЦ;
   КОНЕЦ ifwh;

НАЧАЛО
   НОВ(уАсм);
   уАсм.цТип := мКонст.асмИ32;
КОНЕЦ модАсм.
