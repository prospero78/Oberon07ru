(*
   Copyright 2013 Krotov Anton

   This file is part of Compiler.

   Compiler is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   Compiler is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with Compiler. If not, see <http://www.gnu.org/licenses/>.
   *)

ћќƒ”Ћ№ модƒецл;

»ћѕќ–“ м—кан := мод—канер,
   м”тиль := мод”тиль,
   мјсм := модјсм,
   мјсм»32 := модјсм»нтел32,
   mSys := SYSTEM,
   м«вено := мод«вено,
   м“ип := мод“ип,
   м‘айл := мод‘айл,
   м онст := мод онстанты,
   м онс := мод онсоль,
   мѕам := модѕам€ть,
   мѕроц := модѕроцесс,
   мќш := модќшибки,
   м—тр := мод—троки,
   м÷епь := мод÷епь,
   мѕров := модѕроверка,
   м«в—ущ := мод«вено—ущ,
   м¬ин онс := мод¬ин онсоль,
   м о := модќшибки онст;

 ќЌ—“

   lxERR0 = 100; lxERR5 = 105;
   lxERR7 = 107; lxERR9 = 109; lxERR20 = 120;

   IOVER* = lxERR5 - lxERR0;
   FOVER* = lxERR7 - lxERR0;
   UNDER* = lxERR9 - lxERR0;

   paramvar* = 1; param* = 2;

   defcall = 0; stdcall = 1; cdecl = 2; winapi* = 3;

“»ѕџ

   ту—ущность* = ” ј«ј“≈Ћ№ Ќј т—ущность;

   тућодуль* = ” ј«ј“≈Ћ№ Ќј «јѕ»—№ (м«вено.т«вено)
         у—ущ: м«в—ущ.ту«вено—ущ;
         стр‘айл»м€: м—тр.т—трока;
         у÷епь:      м÷епь.ту÷епь;
         у÷епь»мпорта: м÷епь.ту÷епь;
         у—ущѕерва€: ту—ущность;
         у—канер: м—кан.ту—канер;
         ц”ровень*: ÷≈Ћќ≈;
         б«акрыт, б“ипыЌовые, бЁкспорт“ипа, Std, б—истемный*: Ѕ”Ћ≈¬ќ
       ќЌ≈÷;

   т—ущность* = «јѕ»—№ (м«вено.т«вено)
         у«в—ущ: м«в—ущ.ту«вено—ущ;
         у“ип*: м“ип.ту“ип;
         ућодуль*: тућодуль;
         уѕредок: ту—ущность;
         дв«начение*: ƒЋ»Ќ¬≈ў;
         ц—трока, цѕоз, цЌомер*, ц—ущн*, ц—исѕ–ќ÷≈ƒ”–ј*, ц«нач–азмер, цѕарам–азмер*,
         цЋокал–азмер*, ц—мещение*, VarKind*, ц”ровень*, ParamCount*: ÷≈Ћќ≈;
         бЁкспорт: Ѕ”Ћ≈¬ќ
       ќЌ≈÷;

   PTRBASE = ” ј«ј“≈Ћ№ Ќј «јѕ»—№ (м«вено.т«вено)
         Name: м«в—ущ.ту«вено—ущ;
         line, col: ÷≈Ћќ≈;
         Ptr: м“ип.ту“ип
       ќЌ≈÷;

   туѕункт—тр = ” ј«ј“≈Ћ№ Ќј «јѕ»—№ (м«вено.т«вено)
         Str: м—тр.т—трока
       ќЌ≈÷;

   туѕоле* = ” ј«ј“≈Ћ№ Ќј «јѕ»—№ (м«вено.т«вено)
         у«в—ущ: м«в—ущ.ту«вено—ущ;
         у“ип*: м“ип.ту“ип;
         ц—мещение*: ÷≈Ћќ≈;
         бѕо—сылке*, бЁкспорт*: Ѕ”Ћ≈¬ќ;
         ућодуль*: тућодуль
       ќЌ≈÷;

   т¬ыражение* = «јѕ»—№
         у—ущ*: ту—ущность;
         у“ип*: м“ип.ту“ип;
         ц“ип*: ÷≈Ћќ≈;
         дв«начение*: ƒЋ»Ќ¬≈ў;
         б„тение*, бѕарам*, deref*: Ѕ”Ћ≈¬ќ
       ќЌ≈÷;

   тѕроцедура = ѕ–ќ÷≈ƒ”–ј;
   тѕроцедураѕер = ѕ–ќ÷≈ƒ”–ј (ѕ≈– e: т¬ыражение);
   тѕроцедура—в€зь = ѕ–ќ÷≈ƒ”–ј (e: т¬ыражение; T: м“ип.ту“ип; param: Ѕ”Ћ≈¬ќ): Ѕ”Ћ≈¬ќ;

   ту“ипЌабор* = ћј——»¬ 11 »« м“ип.ту“ип;

ѕ≈–≈ћ

   sttypes: ту“ипЌабор;
   ућодуль*, ућодуль—ис: тућодуль;
   curBlock*: ту—ущность;
   Path, Main, Std, ExtMain: м—тр.т—трока;
   NamePtrBase: м«в—ущ.ту«вено—ущ;
   программа_размер, RecCount, модуль_номер*: ÷≈Ћќ≈;
   PtrBases, у÷епь—трок, у÷епь“ипов, у÷епьѕрограммы: м÷епь.ту÷епь;
   OpSeq: тѕроцедура;
   Expr: тѕроцедураѕер;
   AssComp: тѕроцедура—в€зь;
   б√лавный, б‘ункц–азмер, winplatf, б онст*: Ѕ”Ћ≈¬ќ;
   п“ип_ѕроверить: ѕ–ќ÷≈ƒ”–ј (у оорд_: мќш.ту оорд): м“ип.ту“ип;
   пћодуль_„итать: ѕ–ќ÷≈ƒ”–ј (Path, Name, Ext: м—тр.т—трока): Ѕ”Ћ≈¬ќ;
   ц одќ—: ÷≈Ћќ≈;

ѕ–ќ÷≈ƒ”–ј ѕроцедур–азм_”ст*;
   Ќј„јЋќ
      б‘ункц–азмер := »—“»Ќј
    ќЌ≈÷ ѕроцедур–азм_”ст;

ѕ–ќ÷≈ƒ”–ј —тр_—оздать*(стр_: м—тр.т—трока): м—тр.ту—трока;
    ѕ≈–≈ћ
        стр_нов: м—тр.ту—трока;
    Ќј„јЋќ
        Ќќ¬(стр_нов);
        мѕам.ћало(стр_нов = ѕ”—“ќ);
         ќѕ»я(стр_, стр_нов.стр—трока);
        стр_нов.цƒлина := м—кан.счЄтчик - 1;
        стр_нов.цЌомер := мјсм.ћетка_Ќова€();
        м÷епь.ƒобавить(у÷епь—трок, стр_нов);
        мјсм.—трока(стр_нов)
        ¬≈–Ќ”“№ стр_нов
     ќЌ≈÷ —тр_—оздать;

ѕ–ќ÷≈ƒ”–ј —трћоно_—оздать*(лит_: Ћ»“): м—тр.ту—трока;
   ѕ≈–≈ћ
      nov: м—тр.ту—трока;
   Ќј„јЋќ
      Ќќ¬(nov);
      мѕам.ћало(nov = ѕ”—“ќ);
      nov.стр—трока[0] := лит_;
      nov.стр—трока[1] := 0X;
      nov.цƒлина := 1;
      nov.цЌомер := мјсм.ћетка_Ќова€();
      м÷епь.ƒобавить(у÷епь—трок, nov);
      мјсм.—трока(nov)
      ¬≈–Ќ”“№ nov
    ќЌ≈÷ —трћоно_—оздать;

ѕ–ќ÷≈ƒ”–ј ћодуль_ѕолуч(Name: м«в—ущ.ту«вено—ущ): тућодуль;
   ѕ≈–≈ћ
      cur, res: тућодуль;
   Ќј„јЋќ
      res := ѕ”—“ќ;
      cur := у÷епьѕрограммы.предыдущ(тућодуль);
      ѕќ ј (cur # ѕ”—“ќ) & м—тр.—равнить(cur.у—ущ.стр»м€, Name.стр»м€) ƒ≈Ћј“№
         res := cur;
         cur := ѕ”—“ќ
      ј≈—Ћ» cur # ѕ”—“ќ ƒ≈Ћј“№
         cur := cur.следующ(тућодуль)
       ќЌ≈÷
      ¬≈–Ќ”“№ res
    ќЌ≈÷ ћодуль_ѕолуч;

ѕ–ќ÷≈ƒ”–ј —ущн—лед_ѕолуч*;
   Ќј„јЋќ
      м—кан.—ущность_–аспознать;
      ≈—Ћ» (м—кан.ц—ущность > lxERR0) & (м—кан.ц—ущность < lxERR20) “ќ√ƒј
         мќш.у оорд.цѕоз := мќш.у оорд.цѕоз + м—кан.счЄтчик;
         мѕров.“ест(Ћќ∆№, мќш.у оорд, м—кан.ц—ущность - lxERR0)
       ќЌ≈÷;
      мѕров.“ест2(м—кан.ц—ущность # м онст.сущ ќЌ, 27)
    ќЌ≈÷ —ущн—лед_ѕолуч;

ѕ–ќ÷≈ƒ”–ј —ущность_ѕроверить*(ключ_: ÷≈Ћќ≈);
   ѕ≈–≈ћ
      code: ÷≈Ћќ≈;
   Ќј„јЋќ
      ≈—Ћ» м—кан.ц—ущность # ключ_ “ќ√ƒј
         ¬џЅќ– ключ_ »«
            |м онст.ксћќƒ”Ћ№:  code := 21
            |м онст.сущ»ћя:   code := 22
            |м онст.оп“чк«пт:    code := 23
            |м онст.кс ќЌ≈÷:     code := 24
            |м онст.оп“очка:     code := 25
            |м онст.оп–авно:      code := 35
            |м онст.оп—кобкаѕр р:  code := 38
            |м онст.ксƒќ:      code := 40
            |м онст.кс»«:      code := 41
            |м онст.оп—кобкаѕр‘иг:  code := 51
            |м онст.оп—кобкаЋев ругл:  code := 56
            |м онст.оп«ап€та€:   code := 61
            |м онст.кс“ќ√ƒј:    code := 98
            |м онст.оп—кобкаѕр в: code := 109
            |м онст.ксƒ≈Ћј“№:      code := 118
            |м онст.ксѕќ јЌ≈:   code := 119
            |м онст.опѕрисвоить:  code := 120
            |м онст.кс¬≈–Ќ”“№:  code := 124
            |м онст.опƒвоеточ:   code := 157
         »Ќј„≈
          ќЌ≈÷;
         мѕров.“ест2(Ћќ∆№, code)
       ќЌ≈÷
    ќЌ≈÷ —ущность_ѕроверить;

ѕ–ќ÷≈ƒ”–ј CheckIdent(Name: м«в—ущ.ту«вено—ущ): Ѕ”Ћ≈¬ќ;
   ѕ≈–≈ћ
      cur: ту—ущность;
   Ќј„јЋќ
      cur := ућодуль.у÷епь.следующ(ту—ущность);
      ѕќ ј (cur.ц—ущн # м онст.сущќхрана) & (cur.у«в—ущ # Name) ƒ≈Ћј“№
         cur := cur.предыдущ(ту—ущность)
       ќЌ≈÷
      ¬≈–Ќ”“№ cur.ц—ущн = м онст.сущќхрана
    ќЌ≈÷ CheckIdent;

ѕ–ќ÷≈ƒ”–ј ќхрана_—оздать;
   ѕ≈–≈ћ
      ident: ту—ущность;
   Ќј„јЋќ
      Ќќ¬(ident);
      мѕам.ћало(ident = ѕ”—“ќ);
      ident.у«в—ущ := ѕ”—“ќ;
      ident.ц—ущн := м онст.сущќхрана;
      ident.у“ип := sttypes[м онст.типѕроцѕуста€];
      м÷епь.ƒобавить(ућодуль.у÷епь, ident);
      ƒќЅ(ућодуль.ц”ровень)
    ќЌ≈÷ ќхрана_—оздать;

ѕ–ќ÷≈ƒ”–ј PushIdent(Name: м«в—ущ.ту«вено—ущ; у оорд_: мќш.ту оорд; iType: ÷≈Ћќ≈; T: м“ип.ту“ип; u: тућодуль; Export: Ѕ”Ћ≈¬ќ; StProc: ÷≈Ћќ≈);
   ѕ≈–≈ћ
      ident: ту—ущность;
      i: ÷≈Ћќ≈;
   Ќј„јЋќ
      мѕров.“ест(CheckIdent(Name), у оорд_, 30);
      Ќќ¬(ident);
      мѕам.ћало(ident = ѕ”—“ќ);
      ident.у«в—ущ := Name;
      ident.ц—трока := у оорд_.ц—трока;
      ident.цѕоз := у оорд_.цѕоз;
      ≈—Ћ» iType IN {м онст.сущѕ–ќ÷≈ƒ”–ј, м онст.сущћќƒ”Ћ№} “ќ√ƒј
         ident.цЌомер := мјсм.ћетка_Ќова€();
         i := мјсм.ћетка_Ќова€();
         i := мјсм.ћетка_Ќова€();
         i := мјсм.ћетка_Ќова€()
       ќЌ≈÷;
      ident.ц—ущн := iType;
      ident.у“ип := T;
      ident.ућодуль := u;
      ident.бЁкспорт := Export;
      ident.ц—исѕ–ќ÷≈ƒ”–ј := StProc;
      ident.ц”ровень := ућодуль.ц”ровень;
      м÷епь.ƒобавить(ућодуль.у÷епь, ident)
    ќЌ≈÷ PushIdent;

ѕ–ќ÷≈ƒ”–ј StTypes;
   ѕ≈–≈ћ
      type: м“ип.ту“ип;
      i: ÷≈Ћќ≈;
   Ќј„јЋќ
      sttypes[0] := ѕ”—“ќ;
      ƒЋя i := м онст.тип÷≈Ћќ≈ ƒќ м онст.тип—“–ќ ј ƒ≈Ћј“№
         Ќќ¬(type);
         мѕам.ћало(type = ѕ”—“ќ);
         type.цћаркер := i;
         м÷епь.ƒобавить(у÷епь“ипов, type);
         sttypes[i] := type
       ќЌ≈÷;
      sttypes[м онст.тип÷≈Ћќ≈].размер := 4;
      sttypes[м онст.тип¬≈ў].размер := 4;
      sttypes[м онст.типƒЋ»Ќ¬≈ў].размер := 8;
      sttypes[м онст.типЅ”Ћ≈¬ќ].размер := 1;
      sttypes[м онст.типЋ»“≈–ј].размер := 1;
      sttypes[м онст.типЌјЅќ–].размер := 4;
      sttypes[м онст.типѕроцѕуста€].размер := 0;
      sttypes[м онст.тип—“–ќ ј].размер := 0;
      sttypes[м онст.типѕ”—“ќ].размер := 4;
      sttypes[м онст.TCARD16].размер := 2;
      ƒЋя i := м онст.тип÷≈Ћќ≈ ƒќ м онст.тип—“–ќ ј ƒ≈Ћј“№
         sttypes[i].выравнив := sttypes[i].размер
       ќЌ≈÷
    ќЌ≈÷ StTypes;

ѕ–ќ÷≈ƒ”–ј PushStProc(Name: м—тр.т—трока; StProc: ÷≈Ћќ≈);
   ѕ≈–≈ћ
      у оорд : мќш.ту оорд;
   Ќј„јЋќ
      Ќќ¬(у оорд);
      у оорд.ц—трока := 0;
      у оорд.цѕоз := 0;
      PushIdent(м«в—ущ.ƒобавить(Name), у оорд, м онст.сущ—тандартѕ–ќ÷≈ƒ”–ј, sttypes[м онст.типѕроцѕуста€], ѕ”—“ќ, Ћќ∆№, StProc)
    ќЌ≈÷ PushStProc;

ѕ–ќ÷≈ƒ”–ј PushStType(Name: м—тр.т—трока; T: ÷≈Ћќ≈);
   ѕ≈–≈ћ
      у оорд : мќш.ту оорд;
   Ќј„јЋќ
      Ќќ¬(у оорд);
      у оорд.ц—трока := 0;
      у оорд.цѕоз := 0;
      PushIdent(м«в—ущ.ƒобавить(Name), у оорд, м онст.сущ“»ѕ, sttypes[T], ѕ”—“ќ, Ћќ∆№, 0)
    ќЌ≈÷ PushStType;

ѕ–ќ÷≈ƒ”–ј PushSysProc(Name: м—тр.т—трока; StProc: ÷≈Ћќ≈);
   ѕ≈–≈ћ
      у оорд : мќш.ту оорд;
   Ќј„јЋќ
      Ќќ¬(у оорд);
      у оорд.ц—трока := 0;
      у оорд.цѕоз := 0;
      PushIdent(м«в—ущ.ƒобавить(Name), у оорд, м онст.сущ—исѕ–ќ÷≈ƒ”–ј, sttypes[м онст.типѕроцѕуста€], ѕ”—“ќ, »—“»Ќј, StProc)
    ќЌ≈÷ PushSysProc;

ѕ–ќ÷≈ƒ”–ј PushSysType(Name: м—тр.т—трока; T: ÷≈Ћќ≈);
   ѕ≈–≈ћ
      у оорд : мќш.ту оорд;
   Ќј„јЋќ
      Ќќ¬(у оорд);
      у оорд.ц—трока := 0;
      у оорд.цѕоз := 0;
      PushIdent(м«в—ущ.ƒобавить(Name), у оорд, м онст.сущ“»ѕ, sttypes[T], ѕ”—“ќ, »—“»Ќј, 0)
    ќЌ≈÷ PushSysType;

ѕ–ќ÷≈ƒ”–ј StIdent;
   Ќј„јЋќ
      ќхрана_—оздать;
      (* базовые типы *)
      PushStType("BOOLEAN",  м онст.типЅ”Ћ≈¬ќ);
      PushStType("Ѕ”Ћ≈¬ќ",  м онст.типЅ”Ћ≈¬ќ);

      PushStType("CHAR",     м онст.типЋ»“≈–ј);
      PushStType("Ћ»“",      м онст.типЋ»“≈–ј);

      PushStType("INTEGER",  м онст.тип÷≈Ћќ≈);
      PushStType("÷≈Ћќ≈",    м онст.тип÷≈Ћќ≈);

      PushStType("REAL",     м онст.тип¬≈ў);
      PushStType("¬≈ў",      м онст.тип¬≈ў);

      PushStType("LONGREAL", м онст.типƒЋ»Ќ¬≈ў);
      PushStType("ƒЋ»Ќ¬≈ў",  м онст.типƒЋ»Ќ¬≈ў);

      PushStType("SET",      м онст.типЌјЅќ–);
      PushStType("ЌјЅќ–",    м онст.типЌјЅќ–);

      PushStProc("ABS",      м онст.процјЅ—);
      PushStProc("јЅ—",      м онст.процјЅ—);

      PushStProc("ASR",      м онст.проц«—ѕ);
      PushStProc("«—ѕ",      м онст.проц«—ѕ);

      PushStProc("ASSERT",   м онст.проц ќЌ“–ќЋ№);
      PushStProc(" ќЌ“–ќЋ№", м онст.проц ќЌ“–ќЋ№);

      PushStProc("CHR",      м онст.проц¬Ћ»“);
      PushStProc("¬Ћ»“",      м онст.проц¬Ћ»“);

      PushStProc("COPY",     м онст.проц ќѕ»я);
      PushStProc(" ќѕ»я",     м онст.проц ќѕ»я);

      PushStProc("INC",      м онст.процƒќЅ);
      PushStProc("ƒќЅ",      м онст.процƒќЅ);

      PushStProc("DEC",      м онст.проц¬џ„);
      PushStProc("¬џ„",      м онст.проц¬џ„);

      PushStProc("DISPOSE",  м онст.процЋ»ЎЌ);
      PushStProc("Ћ»ЎЌ",     м онст.процЋ»ЎЌ);

      PushStProc("EXCL",     м онст.проц¬џ„¬);
      PushStProc("¬џ„¬",     м онст.проц¬џ„¬);

      PushStProc("FLOOR",    м онст.проц ÷≈Ћ);
      PushStProc(" ÷≈Ћ",    м онст.проц ÷≈Ћ);

      PushStProc("FLT",      м онст.проц ¬≈ў);
      PushStProc(" ¬≈ў",      м онст.проц ¬≈ў);

      PushStProc("INCL",     м онст.процƒќЅ¬);
      PushStProc("ƒќЅ¬",     м онст.процƒќЅ¬);

      PushStProc("LEN",      м онст.процƒЋ»Ќ);
      PushStProc("ƒЋ»Ќј",    м онст.процƒЋ»Ќ);

      PushStProc("LENGTH",   м онст.процƒЋ»Ќ—“–);
      PushStProc("ƒЋ»Ќ—“–",    м онст.процƒЋ»Ќ—“–);

      PushStProc("LSL",      м онст.процЋ—Ћ);
      PushStProc("Ћ—Ћ",      м онст.процЋ—Ћ);

      PushStProc("LONG",     м онст.проц”ƒЋ»Ќ);
      PushStProc("”ƒЋ»Ќ",    м онст.проц”ƒЋ»Ќ);

      PushStProc("NEW",      м онст.процЌќ¬);
      PushStProc("Ќќ¬",      м онст.процЌќ¬);

      PushStProc("ODD",      м онст.проц„®“);
      PushStProc("„®“",      м онст.проц„®“);

      PushStProc("ORD",      м онст.процЌЋ»“);
      PushStProc("ЌЋ»“",      м онст.процЌЋ»“);

      PushStProc("PACK",     м онст.проц”ѕј );
      PushStProc("”ѕј ",     м онст.проц”ѕј );

      PushStProc("UNPK",     м онст.проц–ј—ѕ);
      PushStProc("–ј—ѕ",     м онст.проц–ј—ѕ);

      PushStProc("ROR",      м онст.проц÷—ѕ);
      PushStProc("÷—ѕ",      м онст.проц÷—ѕ);

      PushStProc("SHORT",    м онст.проц” ќ–ќ“);
      PushStProc("” ќ–ќ“",    м онст.проц” ќ–ќ“);



      PushStProc("BITS",     м онст.процЅ»“);
      PushStProc("Ѕ»“",     м онст.процЅ»“);

      PushStProc("LSR",      м онст.процЋ—ѕ);
      PushStProc("Ћ—ѕ",      м онст.процЋ—ѕ);

      ќхрана_—оздать
    ќЌ≈÷ StIdent;

ѕ–ќ÷≈ƒ”–ј GetQIdent*(Unit: тућодуль; Name: м«в—ущ.ту«вено—ущ): ту—ущность;
   ѕ≈–≈ћ
      cur, res: ту—ущность;
      у оорд: мќш.ту оорд;
   Ќј„јЋќ
      Ќќ¬(у оорд);
      res := ѕ”—“ќ;
      мќш. оорд_”ст(у оорд);
      cur := Unit.у—ущѕерва€.следующ(ту—ущность);
      ѕќ ј (cur # ѕ”—“ќ) & (cur.ц—ущн # м онст.сущќхрана) ƒ≈Ћј“№
         ≈—Ћ» cur.у«в—ущ = Name “ќ√ƒј
            ≈—Ћ» (Unit # ућодуль) & ~cur.бЁкспорт “ќ√ƒј
               res := ѕ”—“ќ
            »Ќј„≈
               res := cur
             ќЌ≈÷;
            cur := ѕ”—“ќ
         »Ќј„≈
            cur := cur.следующ(ту—ущность)
          ќЌ≈÷
       ќЌ≈÷
      ¬≈–Ќ”“№ res
    ќЌ≈÷ GetQIdent;

ѕ–ќ÷≈ƒ”–ј GetIdent*(Name: м«в—ущ.ту«вено—ущ): ту—ущность;
   ѕ≈–≈ћ
      cur, res: ту—ущность;
      у оорд: мќш.ту оорд;
   Ќј„јЋќ
      Ќќ¬(у оорд);
      res := ѕ”—“ќ;
      мќш. оорд_”ст(у оорд);
      cur := ућодуль.у÷епь.следующ(ту—ущность);
      ѕќ ј (cur # ѕ”—“ќ) & (cur.у«в—ущ = Name) ƒ≈Ћј“№
         res := cur;
         cur := ѕ”—“ќ
      ј≈—Ћ» cur # ѕ”—“ќ ƒ≈Ћј“№
         cur := cur.предыдущ(ту—ущность)
       ќЌ≈÷
      ¬≈–Ќ”“№ res
    ќЌ≈÷ GetIdent;

ѕ–ќ÷≈ƒ”–ј Relation*(Op: ÷≈Ћќ≈): Ѕ”Ћ≈¬ќ;
   ѕ≈–≈ћ
      Res: Ѕ”Ћ≈¬ќ;
   Ќј„јЋќ
      ¬џЅќ– Op »«
         |м онст.оп–авно, м онст.опЌе–авно, м онст.опћеньше, м онст.опЅольше,
            м онст.опћеньше»ли–авно, м онст.опЅольше»ли–авно, м онст.кс¬, м онст.кс≈—“№:
                  Res := »—“»Ќј
      »Ќј„≈
         Res := Ћќ∆№
       ќЌ≈÷
      ¬≈–Ќ”“№ Res
    ќЌ≈÷ Relation;

ѕ–ќ÷≈ƒ”–ј Arith(a, b: ƒЋ»Ќ¬≈ў; T: м“ип.ту“ип; Op: ÷≈Ћќ≈; у оорд_:мќш.ту оорд): ƒЋ»Ќ¬≈ў;
    ќЌ—“
      max = м онст.длинвещ_макс;
   ѕ≈–≈ћ
      res: ƒЋ»Ќ¬≈ў;
   Ќј„јЋќ
      ¬џЅќ– Op »«
         |м онст.опѕлюс: res := a + b
         |м онст.опћинус: res := a - b
         |м онст.оп”множ: res := a * b
         |м онст.опƒелен:
            мѕров.“ест(b # 0.0D0, у оорд_, 46);
            res := a / b
         |м онст.ксƒ≈Ћ:
            мѕров.“ест(~((a = ”ƒЋ»Ќ( ¬≈ў(м онст.целое_мин))) & (b = -1.0D0)), у оорд_, IOVER);
            res := ”ƒЋ»Ќ( ¬≈ў( ÷≈Ћ(a) ƒ≈Ћ  ÷≈Ћ(b)))
         |м онст.ксќ—“:
            res := ”ƒЋ»Ќ( ¬≈ў( ÷≈Ћ(a) ќ—“  ÷≈Ћ(b)))
      »Ќј„≈
       ќЌ≈÷;
      мѕров.“ест(~м”тиль.≈слиЅесконеч(res), у оорд_, FOVER);
      ¬џЅќ– T.цћаркер »«
         |м онст.тип÷≈Ћќ≈:
            мѕров.“ест((res <= ”ƒЋ»Ќ( ¬≈ў(м онст.целое_макс))) & (res >= ”ƒЋ»Ќ( ¬≈ў(м онст.целое_мин))), у оорд_, IOVER)
         |м онст.тип¬≈ў:
            мѕров.“ест((res <= ”ƒЋ»Ќ(м онст.вещ_макс)) & (res >= -”ƒЋ»Ќ(м онст.вещ_макс)), у оорд_, FOVER)
         |м онст.типƒЋ»Ќ¬≈ў:
          мѕров.“ест((res <= max) & (res >= -max), у оорд_, FOVER)
      »Ќј„≈
       ќЌ≈÷;
      ≈—Ћ» (res = 0.0D0) & (T.цћаркер ¬ {м онст.тип¬≈ў, м онст.типƒЋ»Ќ¬≈ў}) »Ћ» (ABS(res) < ”ƒЋ»Ќ(м онст.вещ_мин)) & (T.цћаркер = м онст.тип¬≈ў) “ќ√ƒј
         ¬џЅќ– Op »«
            |м онст.опѕлюс:  мѕров.“ест(a = -b, у оорд_, UNDER)
            |м онст.опћинус: мѕров.“ест(a = b, у оорд_, UNDER)
            |м онст.оп”множ:  мѕров.“ест((a = 0.0D0) »Ћ» (b = 0.0D0), у оорд_, UNDER)
            |м онст.опƒелен: мѕров.“ест((a = 0.0D0), у оорд_, UNDER)
         »Ќј„≈
          ќЌ≈÷
       ќЌ≈÷
      ¬≈–Ќ”“№ res
    ќЌ≈÷ Arith;

ѕ–ќ÷≈ƒ”–ј strcmp(адр1_, адр2_, Op_: ÷≈Ћќ≈): ƒЋ»Ќ¬≈ў;
   ѕ≈–≈ћ
      sa, sb: м—тр.ту—трока;
      дв¬ыход: ƒЋ»Ќ¬≈ў;
   Ќј„јЋќ
      sa := м—тр.у—трока_—оздать(адр1_);
      sb := м—тр.у—трока_—оздать(адр2_);
      (* #‘» — посмотреть, ка можно упростить!!! *)
      ¬џЅќ– Op_ »«
         |м онст.оп–авно, м онст.опЌе–авно:
            дв¬ыход := ”ƒЋ»Ќ( ¬≈ў(ЌЋ»“(sa.стр—трока = sb.стр—трока)))
         |м онст.опћеньше, м онст.опЅольше:
            дв¬ыход := ”ƒЋ»Ќ( ¬≈ў(ЌЋ»“(sa.стр—трока < sb.стр—трока)))
         |м онст.опћеньше»ли–авно, м онст.опЅольше»ли–авно:
            дв¬ыход := ”ƒЋ»Ќ( ¬≈ў(ЌЋ»“(sa.стр—трока <= sb.стр—трока)))
      »Ќј„≈
       ќЌ≈÷
      ¬≈–Ќ”“№ дв¬ыход
    ќЌ≈÷ strcmp;

ѕ–ќ÷≈ƒ”–ј Calc*(a, b: ƒЋ»Ќ¬≈ў; Ta, Tb: м“ип.ту“ип; Op: ÷≈Ћќ≈; у оорд_:мќш.ту оорд; ѕ≈– Res: ƒЋ»Ќ¬≈ў; ѕ≈– TRes: м“ип.ту“ип);
  ѕ≈–≈ћ c: ƒЋ»Ќ¬≈ў; ai, bi: ÷≈Ћќ≈;
  Ќј„јЋќ
    ai :=  ÷≈Ћ(a);
    bi :=  ÷≈Ћ(b);
    ≈—Ћ» Op # м онст.кс¬ “ќ√ƒј
      мѕров.“ест(Ta = Tb, у оорд_, 37)
     ќЌ≈÷;
    ¬џЅќ– Op »«
    |м онст.опѕлюс, м онст.опћинус, м онст.оп”множ, м онст.опƒелен:
      мѕров.“ест(~((Op = м онст.опƒелен) & (Ta.цћаркер = м онст.тип÷≈Ћќ≈)), у оорд_, 37);
      ≈—Ћ» Ta.цћаркер ¬ {м онст.тип÷≈Ћќ≈, м онст.тип¬≈ў, м онст.типƒЋ»Ќ¬≈ў} “ќ√ƒј
        Res := Arith(a, b, Ta, Op, у оорд_)
      ј≈—Ћ» Ta.цћаркер = м онст.типЌјЅќ– “ќ√ƒј
        ¬џЅќ– Op »«
        |м онст.опѕлюс:  Res := ”ƒЋ»Ќ( ¬≈ў(ЌЋ»“(Ѕ»“(ai) + Ѕ»“(bi))))
        |м онст.опћинус: Res := ”ƒЋ»Ќ( ¬≈ў(ЌЋ»“(Ѕ»“(ai) - Ѕ»“(bi))))
        |м онст.оп”множ:  Res := ”ƒЋ»Ќ( ¬≈ў(ЌЋ»“(Ѕ»“(ai) * Ѕ»“(bi))))
        |м онст.опƒелен: Res := ”ƒЋ»Ќ( ¬≈ў(ЌЋ»“(Ѕ»“(ai) / Ѕ»“(bi))))
        »Ќј„≈
         ќЌ≈÷
      »Ќј„≈
        мѕров.“ест(Ћќ∆№, у оорд_, 37)
       ќЌ≈÷;
      TRes := Ta
    |м онст.ксƒ≈Ћ, м онст.ксќ—“:
      мѕров.“ест(Ta.цћаркер = м онст.тип÷≈Ћќ≈, у оорд_, 37);
      мѕров.“ест(bi # 0, у оорд_, 48);
      TRes := Ta;
      Res := Arith(a, b, Ta, Op, у оорд_)
    |м онст.оп»:
      мѕров.“ест(Ta.цћаркер = м онст.типЅ”Ћ≈¬ќ, у оорд_, 37);
      Res := ”ƒЋ»Ќ( ¬≈ў(ЌЋ»“((ai # 0) & (bi # 0))))
    |м онст.кс»Ћ»:
      мѕров.“ест(Ta.цћаркер = м онст.типЅ”Ћ≈¬ќ, у оорд_, 37);
      Res := ”ƒЋ»Ќ( ¬≈ў(ЌЋ»“((ai # 0) »Ћ» (bi # 0))))
    |м онст.оп–авно, м онст.опЌе–авно:
      ≈—Ћ» Ta.цћаркер = м онст.тип—“–ќ ј “ќ√ƒј
        Res := strcmp( ÷≈Ћ(a),  ÷≈Ћ(b), Op)
      »Ќј„≈
        Res := ”ƒЋ»Ќ( ¬≈ў(ЌЋ»“(a = b)))
       ќЌ≈÷;
      ≈—Ћ» Op = м онст.опЌе–авно “ќ√ƒј
        Res := ”ƒЋ»Ќ( ¬≈ў(ЌЋ»“(Res = 0.0D0)))
       ќЌ≈÷
    |м онст.опћеньше, м онст.опЅольше:
      ≈—Ћ» Op = м онст.опЅольше “ќ√ƒј
        c := a;
        a := b;
        b := c
       ќЌ≈÷;
      мѕров.“ест(Ta.цћаркер ¬ {м онст.тип—“–ќ ј, м онст.тип÷≈Ћќ≈, м онст.тип¬≈ў, м онст.типƒЋ»Ќ¬≈ў}, у оорд_, 37);
      ≈—Ћ» Ta.цћаркер = м онст.тип—“–ќ ј “ќ√ƒј
        Res := strcmp( ÷≈Ћ(a),  ÷≈Ћ(b), Op)
      »Ќј„≈
        Res := ”ƒЋ»Ќ( ¬≈ў(ЌЋ»“(a < b)))
       ќЌ≈÷
    |м онст.опћеньше»ли–авно, м онст.опЅольше»ли–авно:
      ≈—Ћ» Op = м онст.опЅольше»ли–авно “ќ√ƒј
        c := a;
        a := b;
        b := c
       ќЌ≈÷;
      мѕров.“ест(Ta.цћаркер ¬ {м онст.тип—“–ќ ј, м онст.тип÷≈Ћќ≈, м онст.тип¬≈ў, м онст.типƒЋ»Ќ¬≈ў, м онст.типЌјЅќ–}, у оорд_, 37);
      ≈—Ћ» Ta.цћаркер = м онст.тип—“–ќ ј “ќ√ƒј
        Res := strcmp( ÷≈Ћ(a),  ÷≈Ћ(b), Op)
      ј≈—Ћ» Ta.цћаркер = м онст.типЌјЅќ– “ќ√ƒј
        Res := ”ƒЋ»Ќ( ¬≈ў(ЌЋ»“(Ѕ»“( ÷≈Ћ(a)) <= Ѕ»“( ÷≈Ћ(b)))))
      »Ќј„≈
        Res := ”ƒЋ»Ќ( ¬≈ў(ЌЋ»“(a <= b)))
       ќЌ≈÷
    |м онст.кс¬:
      мѕров.“ест((Ta.цћаркер = м онст.тип÷≈Ћќ≈) & (Tb.цћаркер = м онст.типЌјЅќ–), у оорд_, 37);
      мѕров.“ест(«—ѕ(ai, 5) = 0, у оорд_, 49);
      Res := ”ƒЋ»Ќ( ¬≈ў(ЌЋ»“(ai IN Ѕ»“(bi))))
    »Ќј„≈
     ќЌ≈÷;
    ≈—Ћ» Relation(Op) »Ћ» (Op = м онст.оп») »Ћ» (Op = м онст.кс»Ћ») “ќ√ƒј
      TRes := sttypes[м онст.типЅ”Ћ≈¬ќ]
     ќЌ≈÷
   ќЌ≈÷ Calc;

ѕ–ќ÷≈ƒ”–ј ConstExpr*(ѕ≈– дв«начение_: ƒЋ»Ќ¬≈ў; ѕ≈– тип: м“ип.ту“ип);
   ѕ≈–≈ћ
      выраж: т¬ыражение;
      у оорд: мќш.ту оорд;
   Ќј„јЋќ
      Ќќ¬(у оорд);
      б онст := »—“»Ќј;
      мќш. оорд_”ст(у оорд);
      б‘ункц–азмер := Ћќ∆№;
      Expr(выраж);
      мѕров.“ест(~б‘ункц–азмер & (выраж.ц“ип = м онст.выр ќЌ—“), у оорд, 62);
      дв«начение_ := выраж.дв«начение;
      тип := выраж.у“ип;
      б онст := Ћќ∆№
    ќЌ≈÷ ConstExpr;

ѕ–ќ÷≈ƒ”–ј IdType*(ѕ≈– у оорд_: мќш.ту оорд): м“ип.ту“ип;
   ѕ≈–≈ћ
      им€: ту—ущность;
      Name: м«в—ущ.ту«вено—ущ;
      Unit: тућодуль;
      Res: м“ип.ту“ип;
   Ќј„јЋќ
      Res := ѕ”—“ќ;
      Name := м—кан.у—ущность;
      им€ := GetIdent(Name);
      ≈—Ћ» им€ = ѕ”—“ќ “ќ√ƒј
         мќш. оорд_”ст(у оорд_);
         NamePtrBase := Name;
         —ущн—лед_ѕолуч
      »Ќј„≈
         ≈—Ћ» им€.ц—ущн = м онст.сущ“»ѕ “ќ√ƒј
            мќш. оорд_”ст(у оорд_);
            —ущн—лед_ѕолуч;
            Res := им€.у“ип
         ј≈—Ћ» им€.ц—ущн = м онст.сущћќƒ”Ћ№ “ќ√ƒј
            Unit := им€.ућодуль;
            —ущн—лед_ѕолуч;
            —ущность_ѕроверить(м онст.оп“очка);
            —ущн—лед_ѕолуч;
            —ущность_ѕроверить(м онст.сущ»ћя);
            Name := м—кан.у—ущность;
            NamePtrBase := Name;
            им€ := GetQIdent(Unit, Name);
            ≈—Ћ» Unit # ућодуль “ќ√ƒј
               мѕров.“ест2(им€ # ѕ”—“ќ, 42);
               мѕров.“ест2(им€.ц—ущн = м онст.сущ“»ѕ, 77);
               мќш. оорд_”ст(у оорд_);
               —ущн—лед_ѕолуч;
               Res := им€.у“ип
            »Ќј„≈
               ≈—Ћ» им€ = ѕ”—“ќ “ќ√ƒј
                  мѕров.“ест2((ућодуль.ц”ровень = 3) & ућодуль.б“ипыЌовые, 42);
                  мќш. оорд_”ст(у оорд_);
                  —ущн—лед_ѕолуч;
                  Res := ѕ”—“ќ
               »Ќј„≈
                  мѕров.“ест2(им€.ц—ущн = м онст.сущ“»ѕ, 77);
                  мќш. оорд_”ст(у оорд_);
                  —ущн—лед_ѕолуч;
                  Res := им€.у“ип
                ќЌ≈÷
             ќЌ≈÷
         »Ќј„≈
            мѕров.“ест2(Ћќ∆№, 77)
          ќЌ≈÷
       ќЌ≈÷
      ¬≈–Ќ”“№ Res
    ќЌ≈÷ IdType;

ѕ–ќ÷≈ƒ”–ј FieldOffset(Align, RecSize: ÷≈Ћќ≈): ÷≈Ћќ≈;
  Ќј„јЋќ
    мѕров.“ест2(RecSize <= м онст.целое_макс - (Align - RecSize ќ—“ Align) ќ—“ Align, 83)
    ¬≈–Ќ”“№ RecSize + (Align - RecSize ќ—“ Align) ќ—“ Align
   ќЌ≈÷ FieldOffset;

ѕ–ќ÷≈ƒ”–ј Dim*(T: м“ип.ту“ип): ÷≈Ћќ≈;
  ѕ≈–≈ћ
      n: ÷≈Ћќ≈;
  Ќј„јЋќ
    n := 0;
    ѕќ ј (T.цћаркер = м онст.типћј——»¬) & (T.длина = 0) ƒ≈Ћј“№
      ƒќЅ(n);
      T := T.уѕредок
     ќЌ≈÷
    ¬≈–Ќ”“№ n
   ќЌ≈÷ Dim;

ѕ–ќ÷≈ƒ”–ј SetFields(Tr, Tf: м“ип.ту“ип; Rec: Ѕ”Ћ≈¬ќ);
  ѕ≈–≈ћ
    cur: туѕоле;
  Ќј„јЋќ
    cur := Tr.пол€.предыдущ(туѕоле);
    ѕќ ј cur.у“ип # ѕ”—“ќ ƒ≈Ћј“№
      cur := cur.следующ(туѕоле)
     ќЌ≈÷;
    ѕќ ј cur # ѕ”—“ќ ƒ≈Ћј“№
      cur.у“ип := Tf;
      ≈—Ћ» Rec “ќ√ƒј
        ≈—Ћ» Tf.выравнив > Tr.выравнив “ќ√ƒј
          Tr.выравнив := Tf.выравнив
         ќЌ≈÷;
        ≈—Ћ» Tr.запись = м онст.record “ќ√ƒј
          cur.ц—мещение := FieldOffset(Tf.выравнив, Tr.размер);
          мѕров.“ест2(cur.ц—мещение <= м онст.целое_макс - Tf.размер, 83);
          Tr.размер := cur.ц—мещение + Tf.размер
        ј≈—Ћ» Tr.запись = м онст.noalign “ќ√ƒј
          cur.ц—мещение := FieldOffset(1, Tr.размер);
          мѕров.“ест2(cur.ц—мещение <= м онст.целое_макс - Tf.размер, 83);
          Tr.размер := cur.ц—мещение + Tf.размер
        ј≈—Ћ» Tr.запись = м онст.union “ќ√ƒј
          ≈—Ћ» Tf.размер > Tr.размер “ќ√ƒј
            Tr.размер := Tf.размер
           ќЌ≈÷;
          cur.ц—мещение := 0
         ќЌ≈÷
      »Ќј„≈
        Tr.длина := Tr.длина + 4 * (ЌЋ»“((Tf.цћаркер = м онст.тип«јѕ»—№) & cur.бѕо—сылке) + Dim(Tf) + ЌЋ»“((Tf.цћаркер = м онст.типƒЋ»Ќ¬≈ў) & ~cur.бѕо—сылке) + 1)
       ќЌ≈÷;
      cur := cur.следующ(туѕоле)
     ќЌ≈÷
   ќЌ≈÷ SetFields;

ѕ–ќ÷≈ƒ”–ј GetField*(T: м“ип.ту“ип; Name: м«в—ущ.ту«вено—ущ): туѕоле;
  ѕ≈–≈ћ
    cur, Res: туѕоле;
  Ќј„јЋќ
    Res := ѕ”—“ќ;
    cur := T.пол€.предыдущ(туѕоле);
    ѕќ ј (cur # ѕ”—“ќ) & (cur.у«в—ущ = Name) ƒ≈Ћј“№
      Res := cur;
      cur := ѕ”—“ќ
    ј≈—Ћ» cur # ѕ”—“ќ ƒ≈Ћј“№
      cur := cur.следующ(туѕоле)
     ќЌ≈÷
    ¬≈–Ќ”“№ Res
   ќЌ≈÷ GetField;

ѕ–ќ÷≈ƒ”–ј Unique(T: м“ип.ту“ип; Name: м«в—ущ.ту«вено—ущ): Ѕ”Ћ≈¬ќ;
  ѕ≈–≈ћ
    field: туѕоле;
    res: Ѕ”Ћ≈¬ќ;
  Ќј„јЋќ
    res := »—“»Ќј;
    ѕќ ј (T # ѕ”—“ќ) & res ƒ≈Ћј“№
      field := GetField(T, Name);
      ≈—Ћ» field # ѕ”—“ќ “ќ√ƒј
        ≈—Ћ» (field.ућодуль = ућодуль) »Ћ» field.бЁкспорт “ќ√ƒј
          res := Ћќ∆№
         ќЌ≈÷
       ќЌ≈÷;
      T := T.уѕредок
     ќЌ≈÷
    ¬≈–Ќ”“№ res
   ќЌ≈÷ Unique;

ѕ–ќ÷≈ƒ”–ј notrecurs(id: Ѕ”Ћ≈¬ќ; T: м“ип.ту“ип): Ѕ”Ћ≈¬ќ;
    ¬≈–Ќ”“№ ~(id & (ућодуль.у÷епь.следующ(ту—ущность).ц—ущн = м онст.сущ“»ѕ) & (ућодуль.у÷епь.следующ(ту—ущность).у“ип = T) &
            (T.цћаркер ¬ {м онст.тип«јѕ»—№, м онст.типћј——»¬}))
   ќЌ≈÷ notrecurs;

ѕ–ќ÷≈ƒ”–ј ReadFields(T: м“ип.ту“ип);
   ѕ≈–≈ћ
      Name: м«в—ущ.ту«вено—ущ;
      field: туѕоле;
      Tf: м“ип.ту“ип;
      у оорд: мќш.ту оорд;
      id_T: Ѕ”Ћ≈¬ќ;
   Ќј„јЋќ
      Ќќ¬(у оорд);
      ѕќ ј м—кан.ц—ущность = м онст.сущ»ћя ƒ≈Ћј“№
         Name := м—кан.у—ущность;
         мѕров.“ест2(Unique(T, Name), 30);
         Ќќ¬(field);
         мѕам.ћало(field = ѕ”—“ќ);
         м÷епь.ƒобавить(T.пол€, field);
         field.у«в—ущ := Name;
         field.у“ип := ѕ”—“ќ;
         field.бЁкспорт := Ћќ∆№;
         field.ућодуль := ућодуль;
         —ущн—лед_ѕолуч;
         ≈—Ћ» м—кан.ц—ущность = м онст.оп”множ “ќ√ƒј
            мѕров.“ест2(ућодуль.ц”ровень = 3, 89);
            мѕров.“ест2(ућодуль.б“ипыЌовые, 91);
            мѕров.“ест2(ућодуль.бЁкспорт“ипа, 92);
            field.бЁкспорт := »—“»Ќј;
            —ущн—лед_ѕолуч
          ќЌ≈÷;
      ≈—Ћ» м—кан.ц—ущность = м онст.оп«ап€та€ “ќ√ƒј
         —ущн—лед_ѕолуч;
         —ущность_ѕроверить(м онст.сущ»ћя)
      ј≈—Ћ» м—кан.ц—ущность = м онст.опƒвоеточ “ќ√ƒј
         —ущн—лед_ѕолуч;
         мќш. оорд_”ст(у оорд);
         id_T := м—кан.ц—ущность = м онст.сущ»ћя;
         Tf:= п“ип_ѕроверить(у оорд);
         мѕров.“ест(Tf # ѕ”—“ќ, у оорд, 42);
         мѕров.“ест(notrecurs(id_T, Tf), у оорд, 96);
         SetFields(T, Tf, »—“»Ќј);
         ≈—Ћ» м—кан.ц—ущность = м онст.оп“чк«пт “ќ√ƒј
            —ущн—лед_ѕолуч;
            —ущность_ѕроверить(м онст.сущ»ћя)
         »Ќј„≈
            мѕров.“ест2(м—кан.ц—ущность = м онст.кс ќЌ≈÷, 86)
          ќЌ≈÷
         »Ќј„≈
            мѕров.“ест2(Ћќ∆№, 85)
          ќЌ≈÷
       ќЌ≈÷
    ќЌ≈÷ ReadFields;

ѕ–ќ÷≈ƒ”–ј OpenBase*(T: м“ип.ту“ип): м“ип.ту“ип;
  Ќј„јЋќ
    ѕќ ј (T.цћаркер = м онст.типћј——»¬) & (T.длина = 0) ƒ≈Ћј“№
      T := T.уѕредок
     ќЌ≈÷
    ¬≈–Ќ”“№ T
   ќЌ≈÷ OpenBase;

ѕ–ќ÷≈ƒ”–ј SetVars(T: м“ип.ту“ип);
   ѕ≈–≈ћ
      cur: ту—ущность;
      n: ÷≈Ћќ≈;
      у оорд: мќш.ту оорд;
   Ќј„јЋќ
      Ќќ¬(у оорд);
    cur := ућодуль.у÷епь.следующ(ту—ущность);
    ѕќ ј cur.у“ип = ѕ”—“ќ ƒ≈Ћј“№
      cur := cur.предыдущ(ту—ущность)
     ќЌ≈÷;
    cur := cur.следующ(ту—ущность);
    ѕќ ј cur # ѕ”—“ќ ƒ≈Ћј“№
      cur.у“ип := T;
      ≈—Ћ» cur.бЁкспорт “ќ√ƒј
         у оорд.ц—трока := cur.ц—трока;
         у оорд.цѕоз := cur.цѕоз;
        мѕров.“ест(~(T.цћаркер ¬ {м онст.тип«јѕ»—№, м онст.типћј——»¬}), у оорд, 90)
       ќЌ≈÷;
      ≈—Ћ»(cur.VarKind = paramvar) »Ћ» (cur.VarKind = param) & (T.цћаркер ¬ {м онст.тип«јѕ»—№, м онст.типћј——»¬}) “ќ√ƒј
        n := 4 * (1 + Dim(T) + ЌЋ»“((cur.VarKind = paramvar) & (T.цћаркер = м онст.тип«јѕ»—№)))
      »Ќј„≈
        n := T.размер;
        мѕров.“ест2(n <= м онст.целое_макс - мѕам.¬ыровн€ть(n), 93);
        n := n + мѕам.¬ыровн€ть(n)
       ќЌ≈÷;
      ≈—Ћ» cur.ц”ровень = 3 “ќ√ƒј
        cur.ц—мещение := программа_размер;
        мѕров.“ест2(программа_размер <= м онст.целое_макс - n, 93);
        программа_размер := программа_размер + n;
        мѕров.“ест2(программа_размер <= м онст.целое_макс - мѕам.¬ыровн€ть(программа_размер), 93);
        программа_размер := программа_размер + мѕам.¬ыровн€ть(программа_размер)
      »Ќј„≈
        ≈—Ћ» cur.VarKind = 0 “ќ√ƒј
          cur.ц—мещение := curBlock.цѕарам–азмер - curBlock.ц«нач–азмер - n
        »Ќј„≈
          cur.ц—мещение := curBlock.ц«нач–азмер - 8 + 4 * (cur.ц”ровень + ЌЋ»“((cur.VarKind = paramvar) & (T.цћаркер = м онст.тип«јѕ»—№)))
         ќЌ≈÷
       ќЌ≈÷;
      мѕров.“ест2(curBlock.ц«нач–азмер <= м онст.целое_макс - n, 93);
      curBlock.ц«нач–азмер := curBlock.ц«нач–азмер + n;
      мѕров.“ест2(curBlock.ц«нач–азмер <= м онст.целое_макс - мѕам.¬ыровн€ть(curBlock.ц«нач–азмер), 93);
      curBlock.ц«нач–азмер := curBlock.ц«нач–азмер + мѕам.¬ыровн€ть(curBlock.ц«нач–азмер);
      ≈—Ћ» cur.VarKind # 0 “ќ√ƒј
        curBlock.цѕарам–азмер := curBlock.ц«нач–азмер
       ќЌ≈÷;
      cur := cur.следующ(ту—ущность)
     ќЌ≈÷
   ќЌ≈÷ SetVars;

ѕ–ќ÷≈ƒ”–ј “ип_—оздать(tType, Len, Size, Number: ÷≈Ћќ≈; Base: м“ип.ту“ип; Fields: Ѕ”Ћ≈¬ќ; NewType: м“ип.ту“ип): м“ип.ту“ип;
   ѕ≈–≈ћ
      nov: м“ип.ту“ип;
   Ќј„јЋќ
      ≈—Ћ» NewType = ѕ”—“ќ “ќ√ƒј
         Ќќ¬(nov);
         мѕам.ћало(nov = ѕ”—“ќ)
      »Ќј„≈
         nov := NewType
       ќЌ≈÷;
      м÷епь.ƒобавить(у÷епь“ипов, nov);
    nov.цћаркер := tType;
    nov.длина := Len;
    nov.размер := Size;
    nov.уѕредок := Base;
    nov.пол€ := ѕ”—“ќ;
    nov.номер := Number;
    ≈—Ћ» Fields “ќ√ƒј
      nov.пол€ := м÷епь.—оздать();
      мѕам.ћало(nov.пол€ = ѕ”—“ќ)
     ќЌ≈÷
    ¬≈–Ќ”“№ nov
   ќЌ≈÷ “ип_—оздать;

ѕ–ќ÷≈ƒ”–ј FormalType(у оорд_: мќш.ту оорд): м“ип.ту“ип;
   ѕ≈–≈ћ
      TA: м“ип.ту“ип;
   Ќј„јЋќ
      ≈—Ћ» м—кан.ц—ущность = м онст.ксћј——»¬ “ќ√ƒј
         —ущн—лед_ѕолуч;
         —ущность_ѕроверить(м онст.кс»«);
         —ущн—лед_ѕолуч;
         TA := “ип_—оздать(м онст.типћј——»¬, 0, 0, 0, FormalType(у оорд_), Ћќ∆№, ѕ”—“ќ)
      »Ќј„≈
         —ущность_ѕроверить(м онст.сущ»ћя);
         TA := IdType(у оорд_);
         мѕров.“ест(TA # ѕ”—“ќ, у оорд_, 42);
       ќЌ≈÷
      ¬≈–Ќ”“№ TA
    ќЌ≈÷ FormalType;

ѕ–ќ÷≈ƒ”–ј Section(T: м“ип.ту“ип);
   ѕ≈–≈ћ
      Name: м«в—ущ.ту«вено—ущ;
      ByRef, cont: Ѕ”Ћ≈¬ќ;
      field: туѕоле;
      Tf: м“ип.ту“ип;
      fp: ту—ущность;
      у оорд:мќш.ту оорд;
      proc: Ѕ”Ћ≈¬ќ;
   Ќј„јЋќ
      Ќќ¬(у оорд);
      proc := T = ѕ”—“ќ;
      ≈—Ћ» proc “ќ√ƒј
         T := curBlock.у“ип
       ќЌ≈÷;
      мѕров.“ест2((м—кан.ц—ущность = м онст.сущ»ћя) »Ћ» (м—кан.ц—ущность = м онст.ксѕ≈–≈ћ), 84);
      ByRef := Ћќ∆№;
      ≈—Ћ» м—кан.ц—ущность = м онст.ксѕ≈–≈ћ “ќ√ƒј
         ByRef := »—“»Ќј;
         —ущн—лед_ѕолуч;
         —ущность_ѕроверить(м онст.сущ»ћя)
       ќЌ≈÷;
      cont := »—“»Ќј;
      ѕќ ј cont ƒ≈Ћј“№
         Name := м—кан.у—ущность;
         мѕров.“ест2(GetField(T, Name) = ѕ”—“ќ, 30);
         Ќќ¬(field);
         мѕам.ћало(field = ѕ”—“ќ);
         м÷епь.ƒобавить(T.пол€, field);
         field.у«в—ущ := Name;
         field.у“ип := ѕ”—“ќ;
         field.бѕо—сылке := ByRef;
         ≈—Ћ» proc “ќ√ƒј
           PushIdent(Name, у оорд, м онст.сущѕ≈–≈ћ, ѕ”—“ќ, ѕ”—“ќ, Ћќ∆№, 0);
           ƒќЅ(curBlock.ParamCount);
           fp := ућодуль.у÷епь.следующ(ту—ущность);
           ≈—Ћ» ByRef “ќ√ƒј
             fp.VarKind := paramvar
           »Ќј„≈
             fp.VarKind := param
            ќЌ≈÷
          ќЌ≈÷;
         —ущн—лед_ѕолуч;
         ≈—Ћ» м—кан.ц—ущность = м онст.оп«ап€та€ “ќ√ƒј
           —ущн—лед_ѕолуч;
           —ущность_ѕроверить(м онст.сущ»ћя)
         ј≈—Ћ» м—кан.ц—ущность = м онст.опƒвоеточ “ќ√ƒј
           —ущн—лед_ѕолуч;
           Tf := FormalType(у оорд);
           мѕров.“ест(Dim(Tf) <= м онст.мас_вин, у оорд, 110);
           SetFields(T, Tf, Ћќ∆№);
           ≈—Ћ» proc “ќ√ƒј
             SetVars(Tf)
            ќЌ≈÷;
           cont := Ћќ∆№
         »Ќј„≈
           мѕров.“ест2(Ћќ∆№, 85)
          ќЌ≈÷
       ќЌ≈÷
    ќЌ≈÷ Section;

ѕ–ќ÷≈ƒ”–ј ParamType(T: м“ип.ту“ип);
  ѕ≈–≈ћ break: Ѕ”Ћ≈¬ќ;
  Ќј„јЋќ
    ≈—Ћ» (м—кан.ц—ущность = м онст.сущ»ћя) »Ћ» (м—кан.ц—ущность = м онст.ксѕ≈–≈ћ) “ќ√ƒј
      break := Ћќ∆№;
      ѕќ¬“ќ–я“№
        Section(T);
        ≈—Ћ» м—кан.ц—ущность = м онст.оп“чк«пт “ќ√ƒј
          —ущн—лед_ѕолуч
        »Ќј„≈
          break := »—“»Ќј
         ќЌ≈÷
      ѕќ јЌ≈ break
     ќЌ≈÷
   ќЌ≈÷ ParamType;

ѕ–ќ÷≈ƒ”–ј AddPtrBase(Name: м«в—ущ.ту«вено—ущ; line, col: ÷≈Ћќ≈; T: м“ип.ту“ип);
   ѕ≈–≈ћ
      nov: PTRBASE;
   Ќј„јЋќ
       Ќќ¬(nov);
       мѕам.ћало(nov = ѕ”—“ќ);
       nov.Name := Name;
       nov.line := line;
       nov.col := col;
       nov.Ptr := T;
       м÷епь.ƒобавить(PtrBases, nov)
    ќЌ≈÷ AddPtrBase;

ѕ–ќ÷≈ƒ”–ј FormalList(T: м“ип.ту“ип; ѕ≈– Res: м“ип.ту“ип);
   ѕ≈–≈ћ
      у оорд: мќш.ту оорд;
   Ќј„јЋќ
      Ќќ¬(у оорд);
      ≈—Ћ» м—кан.ц—ущность = м онст.оп—кобкаЋев ругл “ќ√ƒј
         —ущн—лед_ѕолуч;
         ParamType(T);
         —ущность_ѕроверить(м онст.оп—кобкаѕр р);
         —ущн—лед_ѕолуч;
         ≈—Ћ» м—кан.ц—ущность = м онст.опƒвоеточ “ќ√ƒј
            —ущн—лед_ѕолуч;
            —ущность_ѕроверить(м онст.сущ»ћя);
            Res := IdType(у оорд);
            мѕров.“ест(Res # ѕ”—“ќ, у оорд, 42);
            мѕров.“ест(~(Res.цћаркер ¬ {м онст.тип«јѕ»—№, м онст.типћј——»¬}), у оорд, 82)
          ќЌ≈÷
       ќЌ≈÷
    ќЌ≈÷ FormalList;

ѕ–ќ÷≈ƒ”–ј CallFlag(ѕ≈– Call: ÷≈Ћќ≈): Ѕ”Ћ≈¬ќ;
  ѕ≈–≈ћ
    flag: м—тр.т—трока;
    res: Ѕ”Ћ≈¬ќ;
  Ќј„јЋќ
    res := м—кан.ц—ущность = м онст.оп—кобкаЋев в;
    ≈—Ћ» res “ќ√ƒј
      —ущн—лед_ѕолуч;
      м—кан.стр—ущность_ѕолучить(flag);
      ≈—Ћ» flag = "cdecl" “ќ√ƒј
        Call := cdecl
      ј≈—Ћ» flag = "stdcall" “ќ√ƒј
        Call := stdcall
      ј≈—Ћ» flag = "winapi" “ќ√ƒј
        мѕров.“ест2(winplatf, 50);
        Call := winapi
      »Ќј„≈
        мѕров.“ест2(Ћќ∆№, 44)
       ќЌ≈÷;
      —ущн—лед_ѕолуч;
      —ущность_ѕроверить(м онст.оп—кобкаѕр в);
      —ущн—лед_ѕолуч;
    »Ќј„≈
      Call := defcall
     ќЌ≈÷
    ¬≈–Ќ”“№ res
   ќЌ≈÷ CallFlag;

ѕ–ќ÷≈ƒ”–ј RecFlag(ѕ≈– rec: ÷≈Ћќ≈): Ѕ”Ћ≈¬ќ;
  ѕ≈–≈ћ
    flag: м—тр.т—трока;
    res: Ѕ”Ћ≈¬ќ;
  Ќј„јЋќ
    res := м—кан.ц—ущность = м онст.оп—кобкаЋев в;
    ≈—Ћ» res “ќ√ƒј
      —ущн—лед_ѕолуч;
      м—кан.стр—ущность_ѕолучить(flag);
      ≈—Ћ» flag = "union" “ќ√ƒј
        rec := м онст.union
      ј≈—Ћ» flag = "noalign" “ќ√ƒј
        rec := м онст.noalign
      »Ќј„≈
        мѕров.“ест2(Ћќ∆№, 103)
       ќЌ≈÷;
      —ущн—лед_ѕолуч;
      —ущность_ѕроверить(м онст.оп—кобкаѕр в);
      —ущн—лед_ѕолуч;
    »Ќј„≈
      rec := м онст.record
     ќЌ≈÷
    ¬≈–Ќ”“№ res
   ќЌ≈÷ RecFlag;

ѕ–ќ÷≈ƒ”–ј StructType(Comma: Ѕ”Ћ≈¬ќ; NewType: м“ип.ту“ип): м“ип.ту“ип;
   ѕ≈–≈ћ
      v: ƒЋ»Ќ¬≈ў;
      T, nov: м“ип.ту“ип;
      id_T: Ѕ”Ћ≈¬ќ;
      у оорд, у оорд2: мќш.ту оорд;
   Ќј„јЋќ
      Ќќ¬(у оорд);
      Ќќ¬(у оорд2);
      ¬џЅќ– м—кан.ц—ущность »«
         |м онст.ксћј——»¬, м онст.оп«ап€та€:
            ≈—Ћ» м—кан.ц—ущность = м онст.оп«ап€та€ “ќ√ƒј
              мѕров.“ест2(Comma, 39)
             ќЌ≈÷;
            —ущн—лед_ѕолуч;
            мќш. оорд_”ст(у оорд);
            ConstExpr(v, T);
            мѕров.“ест(T.цћаркер = м онст.тип÷≈Ћќ≈, у оорд, 52);
            мѕров.“ест(v > 0.0D0, у оорд, 78);
            nov := “ип_—оздать(м онст.типћј——»¬,  ÷≈Ћ(v), 0, 0, ѕ”—“ќ, Ћќ∆№, NewType);
            ≈—Ћ» м—кан.ц—ущность = м онст.оп«ап€та€ “ќ√ƒј
              nov.уѕредок := StructType(»—“»Ќј, ѕ”—“ќ)
            ј≈—Ћ» м—кан.ц—ущность = м онст.кс»« “ќ√ƒј
              —ущн—лед_ѕолуч;
              мќш. оорд_”ст(у оорд);
              id_T := м—кан.ц—ущность = м онст.сущ»ћя;
              nov.уѕредок := п“ип_ѕроверить(у оорд);
              мѕров.“ест(nov.уѕредок # ѕ”—“ќ, у оорд, 42);
              мѕров.“ест(notrecurs(id_T, nov.уѕредок), у оорд, 96)
            »Ќј„≈
              мѕров.“ест2(Ћќ∆№, 79)
             ќЌ≈÷;
            мѕров.“ест2(nov.уѕредок.размер <= м онст.целое_макс ƒ≈Ћ nov.длина, 83);
            nov.размер := nov.уѕредок.размер * nov.длина;
            nov.выравнив := nov.уѕредок.выравнив
         |м онст.кс«јѕ»—№:
            —ущн—лед_ѕолуч;
            ƒќЅ(RecCount);
            nov := “ип_—оздать(м онст.тип«јѕ»—№, 0, 0, RecCount, ѕ”—“ќ, »—“»Ќј, NewType);
            nov.выравнив := 1;
            мќш. оорд_”ст(у оорд);
            ≈—Ћ» RecFlag(nov.запись) “ќ√ƒј
              мѕров.“ест(ућодуль.б—истемный, у оорд, 111)
             ќЌ≈÷;
            мќш. оорд_”ст(у оорд);
            ≈—Ћ» м—кан.ц—ущность = м онст.оп—кобкаЋев ругл “ќ√ƒј
              —ущн—лед_ѕолуч;
              мќш. оорд_”ст(у оорд2);
              —ущность_ѕроверить(м онст.сущ»ћя);
              nov.уѕредок := IdType(у оорд);
              мѕров.“ест(nov.уѕредок # ѕ”—“ќ, у оорд, 42);
              мѕров.“ест(nov.уѕредок.цћаркер = м онст.тип«јѕ»—№, у оорд, 80);
              мѕров.“ест(notrecurs(»—“»Ќј, nov.уѕредок), у оорд, 96);
              nov.размер := nov.уѕредок.размер;
              nov.выравнив := nov.уѕредок.выравнив;
              —ущность_ѕроверить(м онст.оп—кобкаѕр р);
              —ущн—лед_ѕолуч;
              мѕров.“ест(nov.запись = м онст.record, у оорд, 112);
              мѕров.“ест(nov.уѕредок.запись = м онст.record, у оорд2, 113)
             ќЌ≈÷;
            ReadFields(nov);
            —ущность_ѕроверить(м онст.кс ќЌ≈÷);
            nov.размер := мјсм.¬ыровн€ть(nov.размер, nov.выравнив);
            ≈—Ћ» nov.уѕредок # ѕ”—“ќ “ќ√ƒј
               мјсм.«јѕ»—№_ƒобавить(nov.уѕредок.номер)
            »Ќј„≈
               мјсм.«јѕ»—№_ƒобавить(0)
             ќЌ≈÷;
            —ущн—лед_ѕолуч
         |м онст.кс” ј«ј“≈Ћ№:
            —ущн—лед_ѕолуч;
            —ущность_ѕроверить(м онст.ксƒќ);
            —ущн—лед_ѕолуч;
            nov := “ип_—оздать(м онст.тип” ј«ј“≈Ћ№, 0, 4, 0, ѕ”—“ќ, Ћќ∆№, NewType);
            nov.выравнив := 4;
            мќш. оорд_”ст(у оорд);
            nov.уѕредок := п“ип_ѕроверить(у оорд);
            ≈—Ћ» nov.уѕредок = ѕ”—“ќ “ќ√ƒј
              мѕров.“ест(ућодуль.б“ипыЌовые, у оорд, 42);
              AddPtrBase(NamePtrBase, у оорд.ц—трока, у оорд.цѕоз, nov)
            »Ќј„≈
              мѕров.“ест(nov.уѕредок.цћаркер = м онст.тип«јѕ»—№, у оорд, 81)
             ќЌ≈÷
         |м онст.ксѕ–ќ÷≈ƒ”–ј:
         —ущн—лед_ѕолуч;
         nov := “ип_—оздать(м онст.типѕ–ќ÷≈ƒ”–ј, 0, 4, 0, sttypes[м онст.типѕроцѕуста€], »—“»Ќј, NewType);
         мќш. оорд_”ст(у оорд);
         ≈—Ћ» CallFlag(nov.вызов) “ќ√ƒј
           мѕров.“ест(ућодуль.б—истемный, у оорд, 111)
          ќЌ≈÷;
         nov.выравнив := 4;
         FormalList(nov, nov.уѕредок)
       »Ќј„≈
         мѕров.“ест2(Ћќ∆№, 39)
        ќЌ≈÷
       ¬≈–Ќ”“№ nov
    ќЌ≈÷ StructType;

ѕ–ќ÷≈ƒ”–ј ParseType(у оорд_: мќш.ту оорд): м“ип.ту“ип;
   ѕ≈–≈ћ
      Res: м“ип.ту“ип;
   Ќј„јЋќ
      ≈—Ћ» м—кан.ц—ущность = м онст.сущ»ћя “ќ√ƒј
         Res := IdType(у оорд_)
      »Ќј„≈
         Res := StructType(Ћќ∆№, ѕ”—“ќ)
       ќЌ≈÷
      ¬≈–Ќ”“№ Res
    ќЌ≈÷ ParseType;

ѕ–ќ÷≈ƒ”–ј PopBlock;
  ѕ≈–≈ћ
    cur: ту—ущность;
    n: ÷≈Ћќ≈;
  Ќј„јЋќ
    cur := ућодуль.у÷епь.следующ(ту—ущность);
    n := 0;
    ѕќ ј cur.ц—ущн # м онст.сущќхрана ƒ≈Ћј“№
      cur := cur.предыдущ(ту—ущность);
      ƒќЅ(n)
     ќЌ≈÷;
    cur := cur.предыдущ(ту—ущность);
    ƒќЅ(n);
    ућодуль.у÷епь.счЄтчик := ућодуль.у÷епь.счЄтчик - n;
    ућодуль.у÷епь.следующ := cur;
    cur.следующ := ѕ”—“ќ;
    ¬џ„(ућодуль.ц”ровень)
   ќЌ≈÷ PopBlock;

ѕ–ќ÷≈ƒ”–ј LinkPtr;
   ѕ≈–≈ћ
      cur: PTRBASE;
      id: ту—ущность;
      у оорд: мќш.ту оорд;
   Ќј„јЋќ
      Ќќ¬(у оорд);
      cur := PtrBases.предыдущ(PTRBASE);
      ѕќ ј cur # ѕ”—“ќ ƒ≈Ћј“№
         id := GetIdent(cur.Name);
         у оорд.ц—трока := cur.line;
         у оорд.цѕоз := cur.col;
         мѕров.“ест(id # ѕ”—“ќ, у оорд, 42);
         у оорд.ц—трока := cur.line;
         у оорд.цѕоз := cur.col;
         мѕров.“ест(id.у“ип.цћаркер = м онст.тип«јѕ»—№, у оорд, 81);
         cur.Ptr.уѕредок := id.у“ип;
         cur := cur.следующ(PTRBASE)
       ќЌ≈÷;
      м÷епь.ќчистить(PtrBases)
    ќЌ≈÷ LinkPtr;

ѕ–ќ÷≈ƒ”–ј DeclSeq;
   ѕ≈–≈ћ
      Value: ƒЋ»Ќ¬≈ў;
      T, NewType: м“ип.ту“ип;
      Name: м«в—ущ.ту«вено—ущ;
      Call: ÷≈Ћќ≈;
      Export, func: Ѕ”Ћ≈¬ќ;
      last, id: ту—ущность;
      e: т¬ыражение;
      у оорд: мќш.ту оорд;

   ѕ–ќ÷≈ƒ”–ј IdentDef;
      Ќј„јЋќ
            Name := м—кан.у—ущность;
            мќш. оорд_”ст(у оорд);
            —ущн—лед_ѕолуч;
            Export := Ћќ∆№;
            ≈—Ћ» м—кан.ц—ущность = м онст.оп”множ “ќ√ƒј
              мѕров.“ест2(ућодуль.ц”ровень = 3, 89);
              Export := »—“»Ќј;
              —ущн—лед_ѕолуч
             ќЌ≈÷
       ќЌ≈÷ IdentDef;

   Ќј„јЋќ
      Ќќ¬(у оорд);
      ≈—Ћ» м—кан.ц—ущность = м онст.кс ќЌ—“ “ќ√ƒј
         —ущн—лед_ѕолуч;
         ѕќ ј м—кан.ц—ущность = м онст.сущ»ћя ƒ≈Ћј“№
           IdentDef;
           PushIdent(Name, у оорд, м онст.сущ ќЌ—“, ѕ”—“ќ, ѕ”—“ќ, Export, 0);
           last := ућодуль.у÷епь.следующ(ту—ущность);
           —ущность_ѕроверить(м онст.оп–авно);
           —ущн—лед_ѕолуч;
           ConstExpr(Value, T);
           —ущность_ѕроверить(м онст.оп“чк«пт);
           last.дв«начение := Value;
           last.у“ип := T;
           —ущн—лед_ѕолуч
          ќЌ≈÷
       ќЌ≈÷;
      ≈—Ћ» м—кан.ц—ущность = м онст.кс“»ѕџ “ќ√ƒј
         м÷епь.ќчистить(PtrBases);
         ућодуль.б“ипыЌовые := »—“»Ќј;
         —ущн—лед_ѕолуч;
         ѕќ ј м—кан.ц—ущность = м онст.сущ»ћя ƒ≈Ћј“№
           IdentDef;
           PushIdent(Name, у оорд, м онст.сущ“»ѕ, ѕ”—“ќ, ѕ”—“ќ, Export, 0);
           last := ућодуль.у÷епь.следующ(ту—ущность);
           ућодуль.бЁкспорт“ипа := Export;
           —ущность_ѕроверить(м онст.оп–авно);
           —ущн—лед_ѕолуч;
           Ќќ¬(NewType);
           мѕам.ћало(NewType = ѕ”—“ќ);
           last.у“ип := NewType;
           T := StructType(Ћќ∆№, NewType);
           —ущность_ѕроверить(м онст.оп“чк«пт);
           —ущн—лед_ѕолуч
          ќЌ≈÷
       ќЌ≈÷;
      LinkPtr;
      ућодуль.б“ипыЌовые := Ћќ∆№;
      ућодуль.бЁкспорт“ипа := Ћќ∆№;
      ≈—Ћ» м—кан.ц—ущность = м онст.ксѕ≈–≈ћ “ќ√ƒј
         —ущн—лед_ѕолуч;
         ѕќ ј м—кан.ц—ущность = м онст.сущ»ћя ƒ≈Ћј“№
           IdentDef;
           PushIdent(Name, у оорд, м онст.сущѕ≈–≈ћ, ѕ”—“ќ, ѕ”—“ќ, Export, 0);
           ≈—Ћ» м—кан.ц—ущность = м онст.оп«ап€та€ “ќ√ƒј
             —ущн—лед_ѕолуч;
             —ущность_ѕроверить(м онст.сущ»ћя)
           ј≈—Ћ» м—кан.ц—ущность = м онст.опƒвоеточ “ќ√ƒј
             —ущн—лед_ѕолуч;
             мќш. оорд_”ст(у оорд);
             T := ParseType(у оорд);
             мѕров.“ест(T # ѕ”—“ќ, у оорд, 42);
             SetVars(T);
             —ущность_ѕроверить(м онст.оп“чк«пт);
             —ущн—лед_ѕолуч
           »Ќј„≈
             мѕров.“ест2(Ћќ∆№, 85)
            ќЌ≈÷
          ќЌ≈÷
        ќЌ≈÷;
       ѕќ ј м—кан.ц—ущность = м онст.ксѕ–ќ÷≈ƒ”–ј ƒ≈Ћј“№
         —ущн—лед_ѕолуч;
         мќш. оорд_”ст(у оорд);
         ≈—Ћ» CallFlag(Call) “ќ√ƒј
           мѕров.“ест(ућодуль.ц”ровень = 3, у оорд, 45);
           мѕров.“ест(ућодуль.б—истемный, у оорд, 111)
          ќЌ≈÷;
         —ущность_ѕроверить(м онст.сущ»ћя);
         IdentDef;
         PushIdent(Name, у оорд, м онст.сущѕ–ќ÷≈ƒ”–ј, “ип_—оздать(м онст.типѕ–ќ÷≈ƒ”–ј, 0, 4, 0, sttypes[м онст.типѕроцѕуста€], »—“»Ќј, ѕ”—“ќ), ѕ”—“ќ, Export, 0);
         id := ућодуль.у÷епь.следующ(ту—ущность);
         ≈—Ћ» id.бЁкспорт & б√лавный “ќ√ƒј
           ≈—Ћ» ц одќ— = 6 “ќ√ƒј
             мѕров.“ест((Name # м—кан._«в—тарт) & (Name # м—кан._version), у оорд, 133)
            ќЌ≈÷;
           мјсм.ѕроц_Ёкспортировать(id.цЌомер, Name, мјсм.ћетка_Ќова€())
          ќЌ≈÷;
         id.уѕредок := curBlock;
         curBlock := id;
         ќхрана_—оздать;
         FormalList(ѕ”—“ќ, curBlock.у“ип.уѕредок);
         id.у“ип.вызов := Call;
         —ущность_ѕроверить(м онст.оп“чк«пт);
         —ущн—лед_ѕолуч;
         DeclSeq;
         id.цЋокал–азмер := id.ц«нач–азмер - id.цѕарам–азмер;
         мјсм.ѕроц_Ќачать(id.цЌомер, id.цЋокал–азмер, Ћќ∆№);
         ≈—Ћ» м—кан.ц—ущность = м онст.ксЌј„јЋќ “ќ√ƒј
           —ущн—лед_ѕолуч;
           OpSeq
          ќЌ≈÷;
         func := curBlock.у“ип.уѕредок.цћаркер # м онст.типѕроцѕуста€;
         ≈—Ћ» func “ќ√ƒј
           —ущность_ѕроверить(м онст.кс¬≈–Ќ”“№);
           м”тиль. од—трока_”ст(модуль_номер, мќш.у оорд.ц—трока);
           —ущн—лед_ѕолуч;
           мќш. оорд_”ст(у оорд);
           Expr(e);
           мѕров.“ест(AssComp(e, curBlock.у“ип.уѕредок, Ћќ∆№), у оорд, 125);
           ≈—Ћ» e.ц“ип = м онст.вырѕ≈–≈ћ “ќ√ƒј
             мјсм.«агрузить(e.у“ип.цћаркер)
            ќЌ≈÷
         »Ќј„≈
           мѕров.“ест2(м—кан.ц—ущность # м онст.кс¬≈–Ќ”“№, 123)
          ќЌ≈÷;
         —ущность_ѕроверить(м онст.кс ќЌ≈÷);
         —ущн—лед_ѕолуч;
         —ущность_ѕроверить(м онст.сущ»ћя);
         мѕров.“ест2(м—кан.у—ущность = Name, 87);
         —ущн—лед_ѕолуч;
         —ущность_ѕроверить(м онст.оп“чк«пт);
         —ущн—лед_ѕолуч;
         мјсм»32.ProcEnd(id.цЌомер, (id.цѕарам–азмер + (id.ц”ровень - 3) * 4) * ЌЋ»“(curBlock.у“ип.вызов ¬ {stdcall, winapi, defcall}), func, curBlock.у“ип.уѕредок.цћаркер ¬ {м онст.тип¬≈ў, м онст.типƒЋ»Ќ¬≈ў});
         PopBlock;
         curBlock := curBlock.уѕредок
        ќЌ≈÷
    ќЌ≈÷ DeclSeq;

ѕ–ќ÷≈ƒ”–ј Rtl_ƒобав(u: тућодуль);

    ѕ–ќ÷≈ƒ”–ј AddProc(name: м—тр.т—трока; num: ÷≈Ћќ≈);
      ѕ≈–≈ћ
        id: ту—ущность;
      Ќј„јЋќ
        id := GetQIdent(u, м«в—ущ.ƒобавить(name));
        ≈—Ћ» id = ѕ”—“ќ “ќ√ƒј
          мќш.—ообщ(158);
          мѕроц.«акончить(1)
         ќЌ≈÷;
        мјсм.ѕроц–тл_ƒобавить(num, id.цЌомер)
       ќЌ≈÷ AddProc;

  Ќј„јЋќ
    AddProc("_newrec", мјсм»32._newrec);
    AddProc("_disprec", мјсм»32._disprec);
    AddProc("_rset", мјсм»32._rset);
    AddProc("_inset", мјсм»32._inset);
    AddProc("_saverec", мјсм»32._saverec);
    AddProc("_checktype", мјсм»32._checktype);
    AddProc("_strcmp", мјсм»32._strcmp);
    AddProc("_lstrcmp", мјсм»32._lstrcmp);
    AddProc("_rstrcmp", мјсм»32._rstrcmp);
    AddProc("_savearr", мјсм»32._savearr);
    AddProc("_arrayidx", мјсм»32._arrayidx);
    AddProc("_arrayidx1", мјсм»32._arrayidx1);
    AddProc("_arrayrot", мјсм»32._arrayrot);
    AddProc("_assrt", мјсм»32._assrt);
    AddProc("_strcopy", мјсм»32._strcopy);
    AddProc("_init", мјсм»32._init);
    AddProc("_close", мјсм»32._close);
    AddProc("_halt", мјсм»32._halt);
    AddProc("_length", мјсм»32._length);
   ќЌ≈÷ Rtl_ƒобав;

ѕ–ќ÷≈ƒ”–ј Header(Name: м«в—ущ.ту«вено—ущ);
   ѕ≈–≈ћ
      у оорд: мќш.ту оорд;
   Ќј„јЋќ
      Ќќ¬(у оорд);
      Ќќ¬(ућодуль);
      мѕам.ћало(ућодуль = ѕ”—“ќ);
      ућодуль.у÷епь := м÷епь.—оздать();
      мѕам.ћало(ућодуль.у÷епь = ѕ”—“ќ);
      ућодуль.ц”ровень := 0;
      ућодуль.у—ущ := Name;
      ќхрана_—оздать;
      ќхрана_—оздать;
      у оорд.ц—трока := 0;
      у оорд.цѕоз := 0;
      PushIdent(ућодуль.у—ущ, у оорд, м онст.сущћќƒ”Ћ№, sttypes[м онст.типѕроцѕуста€], ућодуль, Ћќ∆№, 0);
      ќхрана_—оздать;
      ућодуль.у—ущѕерва€ := ућодуль.у÷епь.следующ(ту—ущность);
      ућодуль.б«акрыт := »—“»Ќј
    ќЌ≈÷ Header;

ѕ–ќ÷≈ƒ”–ј ѕсевдо_ƒобав;
  ѕ≈–≈ћ
    модуль_псевдо: тућодуль;
  Ќј„јЋќ
    модуль_псевдо := ућодуль;
    Header(м«в—ущ.ƒобавить("SYSTEM"));
    PushSysProc("ADR",     м онст.sysADR);
    PushSysProc("SIZE",    м онст.sysSIZE);
    PushSysProc("TYPEID",  м онст.sysTYPEID);
    PushSysProc("BIT",     м онст.sysBIT);
    PushSysProc("GET",     м онст.sysGET);
    PushSysProc("PUT",     м онст.sysPUT);
    PushSysProc("CODE",    м онст.sysCODE);
    PushSysProc("MOVE",    м онст.sysMOVE);
    PushSysType("CARD16",  м онст.TCARD16); (* псевдотип, не очень хорошо, но есть *)
    ућодуль—ис := ућодуль;
    ућодуль := модуль_псевдо
   ќЌ≈÷ ѕсевдо_ƒобав;

ѕ–ќ÷≈ƒ”–ј ћодуль_„итать(Path, Name1, Ext: м—тр.т—трока): Ѕ”Ћ≈¬ќ;
   ѕ≈–≈ћ
      FHandle: ÷≈Ћќ≈;
      name, Name, b: м—тр.т—трока;
      idmod: ту—ущность;
      Res, temp: Ѕ”Ћ≈¬ќ;
      у—трока: м—тр.ту—трока;

   ѕ–ќ÷≈ƒ”–ј ћодули_»мпортировать;
      ѕ≈–≈ћ
         cond: ÷≈Ћќ≈;
         name, alias: м«в—ущ.ту«вено—ущ;
         u, self: тућодуль;
         FName: м—тр.т—трока;
         у оорд, у оорд_им€: мќш.ту оорд;

      ѕ–ќ÷≈ƒ”–ј ћодуль_ƒобавить(newcond: ÷≈Ћќ≈);
         ѕ≈–≈ћ
            str: туѕункт—тр;
         Ќј„јЋќ
            u := ћодуль_ѕолуч(name);
            ≈—Ћ» u = ѕ”—“ќ “ќ√ƒј
               self := ућодуль;
               м—кан.—канер_—охранить(ућодуль.у—канер);
                ќѕ»я(name.стр»м€, FName);
               ≈—Ћ» ~((~self.Std & пћодуль_„итать(Path, FName, м онст.расшир)) »Ћ»
                                  пћодуль_„итать(Std, FName, м онст.расшир)) “ќ√ƒј
                  ≈—Ћ» FName = "SYSTEM" “ќ√ƒј
                     ућодуль := ућодуль—ис;
                     self.б—истемный := »—“»Ќј
                  »Ќј„≈
                     мѕров.“ест(Ћќ∆№, у оорд_им€, 32)
                   ќЌ≈÷
                ќЌ≈÷;
               м—кан.—канер_ќткатить(self.у—канер);
               u := ућодуль;
               ућодуль := self;
               м‘айл.»м€_”ст(ућодуль.стр‘айл»м€)
            »Ќј„≈
               мѕров.“ест(u.б«акрыт, у оорд_им€, 31)
             ќЌ≈÷;
            PushIdent(alias, у оорд, м онст.сущћќƒ”Ћ№, sttypes[м онст.типѕроцѕуста€], u, Ћќ∆№, 0);
            Ќќ¬(str);
            мѕам.ћало(str = ѕ”—“ќ);
            str.Str := name.стр»м€;
            м÷епь.ƒобавить(ућодуль.у÷епь»мпорта, str);
            cond := newcond
          ќЌ≈÷ ћодуль_ƒобавить;

      Ќј„јЋќ
         Ќќ¬(у оорд);
         Ќќ¬(у оорд_им€);
         cond := 0;
         ѕќ ј cond # 4 ƒ≈Ћј“№
            —ущн—лед_ѕолуч;
            ¬џЅќ– cond »«
               |0: —ущность_ѕроверить(м онст.сущ»ћя);
                   name := м—кан.у—ущность;
                   мќш. оорд_”ст(у оорд);
                   мќш. оорд_”ст(у оорд_им€);
                   alias := name;
                   cond := 1
               |1: ¬џЅќ– м—кан.ц—ущность »«
                  |м онст.оп«ап€та€:  ћодуль_ƒобавить(0)
                  |м онст.оп“чк«пт:   ћодуль_ƒобавить(4); —ущн—лед_ѕолуч
                  |м онст.опѕрисвоить: cond := 2
                  »Ќј„≈
                     мѕров.“ест2(Ћќ∆№, 28)
                   ќЌ≈÷
               |2: —ущность_ѕроверить(м онст.сущ»ћя);
                  name := м—кан.у—ущность;
                  мќш. оорд_”ст(у оорд_им€);
                  cond := 3
               |3: ¬џЅќ– м—кан.ц—ущность »«
                  |м онст.оп«ап€та€: ћодуль_ƒобавить(0)
                  |м онст.оп“чк«пт:  ћодуль_ƒобавить(4); —ущн—лед_ѕолуч
                »Ќј„≈
                  мѕров.“ест2(Ћќ∆№, 29)
                 ќЌ≈÷
            »Ќј„≈
             ќЌ≈÷
           ќЌ≈÷
       ќЌ≈÷ ћодули_»мпортировать;

   Ќј„јЋќ
      Ќќ¬(у—трока);
      Res := Ћќ∆№;
      name := Name1;
      Name := Name1;
      м—тр.—ложить(Path, Name, b);
      м—тр.—ложить(b, Ext, Name);
      ≈—Ћ» м—кан.‘айл_ќткрыть(Name, FHandle) “ќ√ƒј
         Ќќ¬(ућодуль);
         мѕам.ћало(ућодуль = ѕ”—“ќ);
         ућодуль.б—истемный := Ћќ∆№;
         ућодуль.Std := Path = Std;
         м÷епь.ƒобавить(у÷епьѕрограммы, ућодуль);
         ућодуль.у÷епь := м÷епь.—оздать();
         мѕам.ћало(ућодуль.у÷епь = ѕ”—“ќ);
         ућодуль.у÷епь»мпорта := м÷епь.—оздать();
         мѕам.ћало(ућодуль.у÷епь»мпорта = ѕ”—“ќ);
         Ќќ¬(ућодуль.у—канер);
         мѕам.ћало(ућодуль.у—канер = ѕ”—“ќ);
         ућодуль.б«акрыт := Ћќ∆№;
         ућодуль.ц”ровень := 0;
         ућодуль.б“ипыЌовые := Ћќ∆№;
         ућодуль.бЁкспорт“ипа := Ћќ∆№;
          ќѕ»я(Name, ућодуль.стр‘айл»м€);
         м‘айл.»м€_”ст(ућодуль.стр‘айл»м€);
         StIdent;
         —ущн—лед_ѕолуч; —ущность_ѕроверить(м онст.ксћќƒ”Ћ№);

         —ущн—лед_ѕолуч; —ущность_ѕроверить(м онст.сущ»ћя);
         мѕров.“ест2(м—тр.—равнить(м—кан.у—ущность.стр»м€, name), 33);
         ућодуль.у—ущ := м—кан.у—ущность;
         PushIdent(ућодуль.у—ущ, мќш.у оорд, м онст.сущћќƒ”Ћ№, sttypes[м онст.типѕроцѕуста€], ућодуль, Ћќ∆№, 0);
         idmod := ућодуль.у÷епь.следующ(ту—ущность);
         ќхрана_—оздать;
         —ущн—лед_ѕолуч; —ущность_ѕроверить(м онст.оп“чк«пт);
         —ущн—лед_ѕолуч;
         ≈—Ћ» м—кан.ц—ущность = м онст.кс»ћѕќ–“ “ќ√ƒј
            temp := б√лавный;
            б√лавный := Ћќ∆№;
            ћодули_»мпортировать;
            б√лавный := temp
          ќЌ≈÷;
         м¬ин онс.÷вет_”ст(14, 0);
         м онс.—трока_ѕечать(" омпилирую: "); м онс.—трока_ѕечать(ућодуль.у—ущ.стр»м€); м онс.—трока_ѕечать("."); м онс.Ќов—тр;
         м¬ин онс.÷вет_”ст(7, 0);
          ќѕ»я(idmod.у«в—ущ.стр»м€, у—трока.стр—трока);
         у—трока.цЌомер := idmod.цЌомер;
         мјсм.ћодуль_¬ызвать(у—трока);
         модуль_номер := idmod.цЌомер;
         ућодуль.у—ущѕерва€ := ућодуль.у÷епь.следующ(ту—ущность);
         curBlock := idmod;
         DeclSeq;
         мјсм.ѕроц_Ќачать(idmod.цЌомер, 0, »—“»Ќј);
         ≈—Ћ» м—кан.ц—ущность = м онст.ксЌј„јЋќ “ќ√ƒј
            —ущн—лед_ѕолуч;
            OpSeq
          ќЌ≈÷;
         —ущность_ѕроверить(м онст.кс ќЌ≈÷);
         —ущн—лед_ѕолуч; —ущность_ѕроверить(м онст.сущ»ћя);
         мѕров.“ест2(м—кан.у—ущность = ућодуль.у—ущ, 26);
         —ущн—лед_ѕолуч; —ущность_ѕроверить(м онст.оп“очка);
         мјсм.ѕокинуть;
         ућодуль.б«акрыт := »—“»Ќј;
         м÷епь.ќчистить(ућодуль.у÷епь»мпорта);
         Res := »—“»Ќј
       ќЌ≈÷
      ¬≈–Ќ”“№ Res
   ќЌ≈÷ ћодуль_„итать;

ѕ–ќ÷≈ƒ”–ј  од_Ќастроить*(StdPath, FilePath, NameFile, ExtFile: м—тр.т—трока; windows: Ѕ”Ћ≈¬ќ;
    OpSeqProc: тѕроцедура; ExprProc: тѕроцедураѕер; AssCompProc: тѕроцедура—в€зь; ѕ≈– stypes: ту“ипЌабор);
  Ќј„јЋќ
    winplatf := windows;
    Path := FilePath;
    Main := NameFile;
    ExtMain := ExtFile;
    Std := StdPath;
    OpSeq := OpSeqProc;
    Expr := ExprProc;
    AssComp := AssCompProc;
    у÷епьѕрограммы := м÷епь.—оздать();
    мѕам.ћало(у÷епьѕрограммы = ѕ”—“ќ);
    PtrBases := м÷епь.—оздать();
    мѕам.ћало(PtrBases = ѕ”—“ќ);
    у÷епь“ипов := м÷епь.—оздать();
    мѕам.ћало(у÷епь“ипов = ѕ”—“ќ);
    StTypes;
    у÷епь—трок := м÷епь.—оздать();
    мѕам.ћало(у÷епь—трок = ѕ”—“ќ);
    ѕсевдо_ƒобав;
    stypes := sttypes
   ќЌ≈÷  од_Ќастроить;

ѕ–ќ÷≈ƒ”–ј delfirstchar(ѕ≈– s: м—тр.т—трока);
  ѕ≈–≈ћ i: ÷≈Ћќ≈;
  Ќј„јЋќ
    ƒЋя i := 0 ƒќ ƒЋ»Ќ—“–(s) - 1 ƒ≈Ћј“№
      s[i] := s[i + 1]
     ќЌ≈÷
   ќЌ≈÷ delfirstchar;

ѕ–ќ÷≈ƒ”–ј  омпилировать*(ц одќ—_, ц—тек–азмер_: ÷≈Ћќ≈);
  ѕ≈–≈ћ
    full, path, name, ext, temp, path2: м—тр.т—трока;
  Ќј„јЋќ
    ц одќ— := ц одќ—_;
    б√лавный := Ћќ∆№;
    ≈—Ћ» ћодуль_„итать(Std, "RTL", м онст.расшир) “ќ√ƒј
      Rtl_ƒобав(ућодуль)
    »Ќј„≈
      мќш.—ообщ(65);
      мѕроц.«акончить(1)
     ќЌ≈÷;
    б√лавный := »—“»Ќј;
    ≈—Ћ» ~ћодуль_„итать(Path, Main, ExtMain) “ќ√ƒј
      path2 := Path;
      м”тиль.—трѕарам(full, 0);
      м—тр.–азделить(full, path, name, ext);
      ≈—Ћ» path[0] # 0X “ќ√ƒј
        path[ƒЋ»Ќ—“–(path) - 1] := 0X
       ќЌ≈÷;
      ≈—Ћ» Path[0] = м онст.слэш “ќ√ƒј
        delfirstchar(Path)
       ќЌ≈÷;
      м—тр.—ложить(path, м онст.слэш, path);
      м—тр.—ложить(path, Path, full);
      Path := full;
      ≈—Ћ» (м онст.б¬индоус) & (Path[0] = м онст.слэш) “ќ√ƒј
        delfirstchar(Path)
       ќЌ≈÷;
      ≈—Ћ» ~ћодуль_„итать(Path, Main, ExtMain) “ќ√ƒј
        мќш.—ообщ(64);
        м онс.—трока_ѕечать(path2);
        м онс.—трока_ѕечать(Main);
        м онс.—трока_ѕечать(ExtMain);
        м онс.Ќов—тр;
        мѕроц.«акончить(1)
       ќЌ≈÷
     ќЌ≈÷;
    temp := Path;
    м—тр.—ложить(temp, Main, temp);
    ≈—Ћ» ц одќ—_ IN {2, 3} “ќ√ƒј
      м—тр.—ложить(temp, ".exe", temp)
    ј≈—Ћ» ц одќ—_ = 1 “ќ√ƒј
      м—тр.—ложить(temp, ".dll", temp)
    ј≈—Ћ» ц одќ—_ = 4 “ќ√ƒј
      м—тр.—ложить(temp, ".kex", temp)
    ј≈—Ћ» ц одќ—_ = 6 “ќ√ƒј
      м—тр.—ложить(temp, ".obj", temp)
     ќЌ≈÷;
    ≈—Ћ» ц одќ—_ ¬ {1, 2, 3, 4} “ќ√ƒј
      ц—тек–азмер_ := ц—тек–азмер_ * 100000H
     ќЌ≈÷;
    мјсм.Ёпилог(программа_размер, temp, ц—тек–азмер_)
   ќЌ≈÷  омпилировать;

Ќј„јЋќ
  п“ип_ѕроверить := ParseType;
  пћодуль_„итать := ћодуль_„итать
 ќЌ≈÷ модƒецл.
