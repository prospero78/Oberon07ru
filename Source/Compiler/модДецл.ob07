(*
    Copyright 2013 Krotov Anton

    This file is part of Compiler.

    Compiler is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Compiler is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Compiler. If not, see <http://www.gnu.org/licenses/>.
  *)

ÌÎÄÓËÜ ìîäÄåöë;

ÈÌÏÎÐÒ ìÑêàí := ìîäÑêàíåð,
    ìÓòèëü := ìîäÓòèëü,
    X86 := ìîäÀñì86_32,
    mSys := SYSTEM,
    ìÒèïû := ìîäÒèïû,
    ìÔàéë := ìîäÔàéë,
    ìÊîíñò := ìîäÊîíñòàíòû,
    ìÊîíñ := ìîäÊîíñîëü,
    ìÏàì := ìîäÏàìÿòü,
    ìÏðîö := ìîäÏðîöåññ,
    ìÎø := ìîäÎøèáêè,
    ìÑòð := ìîäÑòðîêè,
    ìÑïèñ := ìîäÑïèñîê,
    ìÏðîâ := ìîäÏðîâåðêà;

ÊÎÍÑÒ

  lxEOF = 0; lxINT = -1; lxREAL = -2; lxSTRING = -3; lxIDENT = -4; lxHEX = -5; lxCHX = -6; lxLONGREAL = -7;
  lxBY = 3;
  lxDIV = 6;
  lxMOD = 17;

  lxLRound = 60; lxCaret = 63;
  lxRCurly = 66; lxDot = 67; lxDbl = 68; lxAssign = 69;
  lxLE = 75; lxGE = 76;

  lxERR0 = 100; lxERR1 = 101; lxERR2 = 102; lxERR3 = 103; lxERR4 = 104; lxERR5 = 105; lxERR6 = 106;
  lxERR7 = 107; lxERR8 = 108; lxERR9 = 109; lxERR10 = 110; lxERR11 = 111; lxERR20 = 120;

  IDMOD = 1; IDCONST = 2; IDTYPE = 3; IDVAR = 4; IDPROC = 5; IDSTPROC = 6; IDGUARD = 7; IDPARAM = 8; IDSYSPROC = 9;

  stABS = 1; stODD = 2; stLEN = 3; stLSL = 4; stASR = 5; stROR = 6; stFLOOR = 7; stFLT = 8;
  stORD = 9; stCHR = 10; stLONG = 11; stSHORT = 12; stINC = 13; stDEC = 14; stINCL = 15;
  stEXCL = 16; stCOPY = 17; stNEW = 18; stASSERT = 19; stPACK = 20; stUNPK = 21; stDISPOSE = 22;
  stBITS = 23; stLSR = 24; stLENGTH = 25;

  sysADR = 101; sysSIZE = 102; sysBIT = 103; sysGET = 104; sysPUT = 105; sysCODE = 106;
  sysTYPEID = 107; sysMOVE = 108;

  TINTEGER = 1; TREAL = 2; TLONGREAL = 3; TCHAR = 4; TSET = 5; TBOOLEAN = 6; TVOID = 7; TNIL = 8;
  TCARD16 = 9; TSTRING = 10; TARRAY = 11; TRECORD = 12; TPOINTER = 13; TPROC = 14;

  paramvar* = 1; param* = 2;

  defcall = 0; stdcall = 1; cdecl = 2; winapi* = 3;

  record = 0; union = 1; noalign = 2;

  eVAR = 1; eCONST = 2; eEXP = 3; ePROC = 4; eSTPROC = 5; eSYSPROC = 6;

  IOVER* = lxERR5 - lxERR0;
  FOVER* = lxERR7 - lxERR0;
  UNDER* = lxERR9 - lxERR0;

ÒÈÏÛ

  òóÒèï* = ÓÊÀÇÀÒÅËÜ ÍÀ ÇÀÏÈÑÜ (ìÒèïû.òÏóíêò)
      tType*, ðàçìåð*, Len*, Number*, Align, Call*, Rec: ÖÅËÎÅ;
      Base*: òóÒèï;
      Fields*: ìÒèïû.òóÑïèñîê
    ÊÎÍÅÖ;

  òóÈìÿ* = ÓÊÀÇÀÒÅËÜ ÍÀ òÈìÿ;

  òÌîäóëü* = ÓÊÀÇÀÒÅËÜ ÍÀ ÇÀÏÈÑÜ (ìÒèïû.òÏóíêò)
      Name: ìÒèïû.òóÓçåë;
      File: ìÑòð.òÑòðîêà;
      Idents: ìÒèïû.òóÑïèñîê;
      Import: ìÒèïû.òóÑïèñîê;
      IdentBegin: òóÈìÿ;
      scanner: ìÒèïû.òóÑêàíåð;
      Level*: ÖÅËÎÅ;
      Closed, typedecl, ExportType, Std, sys: ÁÓËÅÂÎ
    ÊÎÍÅÖ;

  òÈìÿ* = ÇÀÏÈÑÜ (ìÒèïû.òÏóíêò)
      Name: ìÒèïû.òóÓçåë;
      T*: òóÒèï;
      Unit*: òÌîäóëü;
      Parent*: òóÈìÿ;
      Value*: ÄËÈÍÂÅÙ;
      line*, col*, Number*, iType*, StProc*, VarSize, ParamSize*,
      LocalSize*, Offset*, VarKind*, Level*, ParamCount*: ÖÅËÎÅ;
      Export: ÁÓËÅÂÎ
    ÊÎÍÅÖ;

  PTRBASE = ÓÊÀÇÀÒÅËÜ ÍÀ ÇÀÏÈÑÜ (ìÒèïû.òÏóíêò)
      Name: ìÒèïû.òóÓçåë;
      line, col: ÖÅËÎÅ;
      Ptr: òóÒèï
    ÊÎÍÅÖ;

  òóÏóíêòÑòð = ÓÊÀÇÀÒÅËÜ ÍÀ ÇÀÏÈÑÜ (ìÒèïû.òÏóíêò)
      Str: ìÑòð.òÑòðîêà
    ÊÎÍÅÖ;

  òóÏîëå* = ÓÊÀÇÀÒÅËÜ ÍÀ ÇÀÏÈÑÜ (ìÒèïû.òÏóíêò)
      Name: ìÒèïû.òóÓçåë;
      T*: òóÒèï;
      Offset*: ÖÅËÎÅ;
      ByRef*, Export*: ÁÓËÅÂÎ;
      Unit*: òÌîäóëü
    ÊÎÍÅÖ;

  òóÊîíñòÑòð* = ÓÊÀÇÀÒÅËÜ ÍÀ ÇÀÏÈÑÜ (ìÒèïû.òÏóíêò)
      ñòð*: ìÑòð.òÑòðîêà;
      äëèíà*, íîìåð*: ÖÅËÎÅ
    ÊÎÍÅÖ;

  òÂûðàæåíèå* = ÇÀÏÈÑÜ
      id*: òóÈìÿ;
      T*: òóÒèï;
      eType*: ÖÅËÎÅ;
      Value*: ÄËÈÍÂÅÙ;
      Read*, vparam*, deref*: ÁÓËÅÂÎ
    ÊÎÍÅÖ;

  òÏðîöåäóðà = ÏÐÎÖÅÄÓÐÀ;
  òÏðîöåäóðàÏåð = ÏÐÎÖÅÄÓÐÀ (ÏÅÐ e: òÂûðàæåíèå);
  òÏðîöåäóðàÑâÿçü = ÏÐÎÖÅÄÓÐÀ (e: òÂûðàæåíèå; T: òóÒèï; param: ÁÓËÅÂÎ): ÁÓËÅÂÎ;

  òóÒèïÍàáîð* = ÌÀÑÑÈÂ 11 ÈÇ òóÒèï;

ÏÅÐÅÌ

  sttypes: òóÒèïÍàáîð;
  unit*, sys: òÌîäóëü;
  curBlock*: òóÈìÿ;
  Path, Main, Std, ExtMain: ìÑòð.òÑòðîêà;
  NamePtrBase: ìÒèïû.òóÓçåë; ProgSize*, RecCount, UnitNumber*: ÖÅËÎÅ;
  PtrBases, ñòðîêè, types, prog: ìÒèïû.òóÑïèñîê;
  OpSeq: òÏðîöåäóðà;
  Expr: òÏðîöåäóðàÏåð;
  AssComp: òÏðîöåäóðàÑâÿçü;
  main, sizefunc, winplatf, Const*: ÁÓËÅÂÎ;
  pParseType: ÏÐÎÖÅÄÓÐÀ (ÏÅÐ line, col: ÖÅËÎÅ): òóÒèï;
  ïÌîäóëü_×èòàòü: ÏÐÎÖÅÄÓÐÀ (Path, Name, Ext: ìÑòð.òÑòðîêà): ÁÓËÅÂÎ;
  Platform: ÖÅËÎÅ;

ÏÐÎÖÅÄÓÐÀ ÏðîöåäóðÐàçì_Óñò*;
  ÍÀ×ÀËÎ
    sizefunc := ÈÑÒÈÍÀ
  ÊÎÍÅÖ ÏðîöåäóðÐàçì_Óñò;

ÏÐÎÖÅÄÓÐÀ ÏàìÎø_Ïðîâåðèòü*(err: ÁÓËÅÂÎ);
  ÍÀ×ÀËÎ
    ÅÑËÈ err ÒÎÃÄÀ
      ìÏàì.Îøèáêà(err)
    ÊÎÍÅÖ
  ÊÎÍÅÖ ÏàìÎø_Ïðîâåðèòü;

ÏÐÎÖÅÄÓÐÀ Ñòð_Ïîëó÷*(adr: ÄËÈÍÂÅÙ): òóÊîíñòÑòð;
    ÏÅÐÅÌ
        ñòð: òóÊîíñòÑòð;
    ÍÀ×ÀËÎ
        mSys.PUT(mSys.ADR(ñòð), FLOOR(adr))
        ÂÅÐÍÓÒÜ ñòð
    ÊÎÍÅÖ Ñòð_Ïîëó÷;

ÏÐÎÖÅÄÓÐÀ Ñòð_Ñîçäàòü*(ñòð_: ìÑòð.òÑòðîêà): òóÊîíñòÑòð;
    ÏÅÐÅÌ
        ñòð_íîâ: òóÊîíñòÑòð;
    ÍÀ×ÀËÎ
        ÍÎÂ(ñòð_íîâ);
        ÏàìÎø_Ïðîâåðèòü(ñòð_íîâ = ÏÓÑÒÎ);
        COPY(ñòð_, ñòð_íîâ.ñòð);
        ñòð_íîâ.äëèíà := ìÑêàí.count - 1;
        ñòð_íîâ.íîìåð := X86.NewLabel();
        ìÑïèñ.Äîáàâèòü(ñòðîêè, ñòð_íîâ);
        X86.String(ñòð_íîâ.íîìåð, ñòð_íîâ.äëèíà, ñòð_íîâ.ñòð)
        ÂÅÐÍÓÒÜ ñòð_íîâ
    ÊÎÍÅÖ Ñòð_Ñîçäàòü;

ÏÐÎÖÅÄÓÐÀ ÑòðÌîíî_Ñîçäàòü*(c: ÑÈÌÂ): òóÊîíñòÑòð;
  ÏÅÐÅÌ
    nov: òóÊîíñòÑòð;
  ÍÀ×ÀËÎ
    ÍÎÂ(nov);
    ÏàìÎø_Ïðîâåðèòü(nov = ÏÓÑÒÎ);
    nov.ñòð[0] := c;
    nov.ñòð[1] := 0X;
    nov.äëèíà := 1;
    nov.íîìåð := X86.NewLabel();
    ìÑïèñ.Äîáàâèòü(ñòðîêè, nov);
    X86.String(nov.íîìåð, nov.äëèíà, nov.ñòð)
    ÂÅÐÍÓÒÜ nov
  ÊÎÍÅÖ ÑòðÌîíî_Ñîçäàòü;

ÏÐÎÖÅÄÓÐÀ Êîîðä_Óñò*(ÏÅÐ line, col: ÖÅËÎÅ);
  ÍÀ×ÀËÎ
    line := ìÑêàí.line;
    col := ìÑêàí.col
  ÊÎÍÅÖ Êîîðä_Óñò;

ÏÐÎÖÅÄÓÐÀ Ìîäóëü_Ïîëó÷(Name: ìÒèïû.òóÓçåë): òÌîäóëü;
  ÏÅÐÅÌ
    cur, res: òÌîäóëü;
  ÍÀ×ÀËÎ
    res := ÏÓÑÒÎ;
    cur := prog.ïðåäûäóù(òÌîäóëü);
    ÏÎÊÀ (cur # ÏÓÑÒÎ) & ìÓòèëü.streq(cur.Name.èìÿ, Name.èìÿ) ÄÅËÀÒÜ
      res := cur;
      cur := ÏÓÑÒÎ
    ÀÅÑËÈ cur # ÏÓÑÒÎ ÄÅËÀÒÜ
      cur := cur.ñëåäóþù(òÌîäóëü)
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ res
  ÊÎÍÅÖ Ìîäóëü_Ïîëó÷;

ÏÐÎÖÅÄÓÐÀ Êëþ÷Ñëåä_Ïîëó÷*;
  ÍÀ×ÀËÎ
    ìÑêàí.Ëåêñåìà_Ïîëó÷;
    ÅÑËÈ (ìÑêàí.ñóùíîñòü > lxERR0) & (ìÑêàí.ñóùíîñòü < lxERR20) ÒÎÃÄÀ
      ìÏðîâ.Òåñò(ËÎÆÜ, ìÑêàí.line, ìÑêàí.col + ìÑêàí.count, ìÑêàí.ñóùíîñòü - lxERR0)
    ÊÎÍÅÖ;
    ìÏðîâ.Òåñò2(ìÑêàí.ñóùíîñòü # lxEOF, 27)
  ÊÎÍÅÖ Êëþ÷Ñëåä_Ïîëó÷;

ÏÐÎÖÅÄÓÐÀ Êëþ÷_Ïðîâåðèòü*(key: ÖÅËÎÅ);
    ÏÅÐÅÌ
      code: ÖÅËÎÅ;
    ÍÀ×ÀËÎ
      ÅÑËÈ ìÑêàí.ñóùíîñòü # key ÒÎÃÄÀ
        ÂÛÁÎÐ key ÈÇ
          |ìÊîíñò.êñÌÎÄÓËÜ:  code := 21
          |lxIDENT:   code := 22
          |ìÊîíñò.îïÒ÷êÇïò:    code := 23
          |ìÊîíñò.êñÊÎÍÅÖ:     code := 24
          |lxDot:     code := 25
          |ìÊîíñò.îïÐàâíî:      code := 35
          |ìÊîíñò.îïÑêîáêàÏðÊð:  code := 38
          |ìÊîíñò.êñÄÎ:      code := 40
          |ìÊîíñò.êñÈÇ:      code := 41
          |lxRCurly:  code := 51
          |lxLRound:  code := 56
          |ìÊîíñò.îïÇàïÿòàÿ:   code := 61
          |ìÊîíñò.êñÒÎÃÄÀ:    code := 98
          |ìÊîíñò.îïÑêîáêàÏðÊâ: code := 109
          |ìÊîíñò.êñÄÅËÀÒÜ:      code := 118
          |ìÊîíñò.êñÏÎÊÀÍÅ:   code := 119
          |lxAssign:  code := 120
          |ìÊîíñò.êñÂÅÐÍÓÒÜ:  code := 124
          |ìÊîíñò.îïÄâîåòî÷:   code := 157
        ÈÍÀ×Å
        ÊÎÍÅÖ;
        ìÏðîâ.Òåñò2(ËÎÆÜ, code)
      ÊÎÍÅÖ
    ÊÎÍÅÖ Êëþ÷_Ïðîâåðèòü;

ÏÐÎÖÅÄÓÐÀ CheckIdent(Name: ìÒèïû.òóÓçåë): ÁÓËÅÂÎ;
  ÏÅÐÅÌ
    cur: òóÈìÿ;
  ÍÀ×ÀËÎ
    cur := unit.Idents.ñëåäóþù(òóÈìÿ);
    ÏÎÊÀ (cur.iType # IDGUARD) & (cur.Name # Name) ÄÅËÀÒÜ
      cur := cur.ïðåäûäóù(òóÈìÿ)
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ cur.iType = IDGUARD
  ÊÎÍÅÖ CheckIdent;

ÏÐÎÖÅÄÓÐÀ Îõðàíà_Ñîçäàòü;
  ÏÅÐÅÌ
    ident: òóÈìÿ;
  ÍÀ×ÀËÎ
    ÍÎÂ(ident);
    ÏàìÎø_Ïðîâåðèòü(ident = ÏÓÑÒÎ);
    ident.Name := ÏÓÑÒÎ;
    ident.iType := IDGUARD;
    ident.T := sttypes[TVOID];
    ìÑïèñ.Äîáàâèòü(unit.Idents, ident);
    ÄÎÁ(unit.Level)
  ÊÎÍÅÖ Îõðàíà_Ñîçäàòü;

ÏÐÎÖÅÄÓÐÀ PushIdent(Name: ìÒèïû.òóÓçåë; line, col, iType: ÖÅËÎÅ; T: òóÒèï; u: òÌîäóëü; Export: ÁÓËÅÂÎ; StProc: ÖÅËÎÅ);
  ÏÅÐÅÌ
    ident: òóÈìÿ;
    i: ÖÅËÎÅ;
  ÍÀ×ÀËÎ
    ìÏðîâ.Òåñò(CheckIdent(Name), line, col, 30);
    ÍÎÂ(ident);
    ÏàìÎø_Ïðîâåðèòü(ident = ÏÓÑÒÎ);
    ident.Name := Name;
    ident.line := line;
    ident.col := col;
    ÅÑËÈ iType IN {IDPROC, IDMOD} ÒÎÃÄÀ
      ident.Number := X86.NewLabel();
      i := X86.NewLabel();
      i := X86.NewLabel();
      i := X86.NewLabel()
    ÊÎÍÅÖ;
    ident.iType := iType;
    ident.T := T;
    ident.Unit := u;
    ident.Export := Export;
    ident.StProc := StProc;
    ident.Level := unit.Level;
    ìÑïèñ.Äîáàâèòü(unit.Idents, ident)
  ÊÎÍÅÖ PushIdent;

ÏÐÎÖÅÄÓÐÀ StTypes;
  ÏÅÐÅÌ
    type: òóÒèï; i: ÖÅËÎÅ;
  ÍÀ×ÀËÎ
    sttypes[0] := ÏÓÑÒÎ;
    ÄËß i := TINTEGER ÄÎ TSTRING ÄÅËÀÒÜ
        ÍÎÂ(type);
        ÏàìÎø_Ïðîâåðèòü(type = ÏÓÑÒÎ);
        type.tType := i;
        ìÑïèñ.Äîáàâèòü(types, type);
        sttypes[i] := type
    ÊÎÍÅÖ;
    sttypes[TINTEGER].ðàçìåð := 4;
    sttypes[TREAL].ðàçìåð := 4;
    sttypes[TLONGREAL].ðàçìåð := 8;
    sttypes[TBOOLEAN].ðàçìåð := 1;
    sttypes[TCHAR].ðàçìåð := 1;
    sttypes[TSET].ðàçìåð := 4;
    sttypes[TVOID].ðàçìåð := 0;
    sttypes[TSTRING].ðàçìåð := 0;
    sttypes[TNIL].ðàçìåð := 4;
    sttypes[TCARD16].ðàçìåð := 2;
    ÄËß i := TINTEGER ÄÎ TSTRING ÄÅËÀÒÜ
      sttypes[i].Align := sttypes[i].ðàçìåð
    ÊÎÍÅÖ
  ÊÎÍÅÖ StTypes;

ÏÐÎÖÅÄÓÐÀ PushStProc(Name: ìÑòð.òÑòðîêà; StProc: ÖÅËÎÅ);
  ÍÀ×ÀËÎ
    PushIdent(ìÑêàí.Óçåë_Äîáàâ(Name), 0, 0, IDSTPROC, sttypes[TVOID], ÏÓÑÒÎ, ËÎÆÜ, StProc)
  ÊÎÍÅÖ PushStProc;

ÏÐÎÖÅÄÓÐÀ PushStType(Name: ìÑòð.òÑòðîêà; T: ÖÅËÎÅ);
  ÍÀ×ÀËÎ
    PushIdent(ìÑêàí.Óçåë_Äîáàâ(Name), 0, 0, IDTYPE, sttypes[T], ÏÓÑÒÎ, ËÎÆÜ, 0)
  ÊÎÍÅÖ PushStType;

ÏÐÎÖÅÄÓÐÀ PushSysProc(Name: ìÑòð.òÑòðîêà; StProc: ÖÅËÎÅ);
  ÍÀ×ÀËÎ
    PushIdent(ìÑêàí.Óçåë_Äîáàâ(Name), 0, 0, IDSYSPROC, sttypes[TVOID], ÏÓÑÒÎ, ÈÑÒÈÍÀ, StProc)
  ÊÎÍÅÖ PushSysProc;

ÏÐÎÖÅÄÓÐÀ PushSysType(Name: ìÑòð.òÑòðîêà; T: ÖÅËÎÅ);
  ÍÀ×ÀËÎ
    PushIdent(ìÑêàí.Óçåë_Äîáàâ(Name), 0, 0, IDTYPE, sttypes[T], ÏÓÑÒÎ, ÈÑÒÈÍÀ, 0)
  ÊÎÍÅÖ PushSysType;

ÏÐÎÖÅÄÓÐÀ StIdent;
  ÍÀ×ÀËÎ
    Îõðàíà_Ñîçäàòü;
    PushStProc("ABS",      stABS);
    PushStProc("ASR",      stASR);
    
    PushStProc("ASSERT",   stASSERT);
    PushStProc("ÇÀÙÈÒÀ",   stASSERT);
    
    PushStType("BOOLEAN",  TBOOLEAN);
    PushStType("ÁÓËÅÂÎ",  TBOOLEAN);
    
    PushStType("CHAR",     TCHAR);
    PushStType("ÑÈÌÂ",     TCHAR);
    PushStProc("CHR",      stCHR);
    PushStProc("COPY",     stCOPY);
    
    PushStProc("DEC",      stDEC);
    PushStProc("ÂÛ×",      stDEC);
    
    PushStProc("DISPOSE",  stDISPOSE);
    PushStProc("EXCL",     stEXCL);
    PushStProc("FLOOR",    stFLOOR);
    PushStProc("FLT",      stFLT);
    
    PushStProc("INC",      stINC);
    PushStProc("ÄÎÁ",      stINC);
    
    PushStProc("INCL",     stINCL);
    
    PushStType("INTEGER",  TINTEGER);
    PushStType("ÖÅËÎÅ",  TINTEGER);
    
    PushStProc("LEN",      stLEN);
    PushStProc("LSL",      stLSL);
    
    PushStProc("LONG",     stLONG);
    PushStProc("ÄËÈÍ",     stLONG);
    
    PushStType("LONGREAL", TLONGREAL);
    PushStType("ÄËÈÍÂÅÙ", TLONGREAL);
    
    PushStProc("NEW",      stNEW);
    PushStProc("ÍÎÂ",      stNEW);
    
    PushStProc("ODD",      stODD);
    PushStProc("ORD",      stORD);
    PushStProc("PACK",     stPACK);
    
    PushStType("REAL",     TREAL);
    PushStType("ÂÅÙ",     TREAL);
    
    PushStProc("ROR",      stROR);
    PushStType("SET",      TSET);
    
    PushStProc("SHORT",    stSHORT);
    PushStProc("ÊÎÐÎÒ",    stSHORT);
    
    PushStProc("UNPK",     stUNPK);
    PushStProc("BITS",     stBITS);
    PushStProc("LSR",      stLSR);
    
    PushStProc("LENGTH",   stLENGTH);
    PushStProc("ÄËÈÍÀ",   stLENGTH);
    Îõðàíà_Ñîçäàòü
  ÊÎÍÅÖ StIdent;

ÏÐÎÖÅÄÓÐÀ GetQIdent*(Unit: òÌîäóëü; Name: ìÒèïû.òóÓçåë): òóÈìÿ;
  ÏÅÐÅÌ
    cur, res: òóÈìÿ;
    line, col: ÖÅËÎÅ;
  ÍÀ×ÀËÎ
    res := ÏÓÑÒÎ;
    Êîîðä_Óñò(line, col);
    cur := Unit.IdentBegin.ñëåäóþù(òóÈìÿ);
    ÏÎÊÀ (cur # ÏÓÑÒÎ) & (cur.iType # IDGUARD) ÄÅËÀÒÜ
      ÅÑËÈ cur.Name = Name ÒÎÃÄÀ
        ÅÑËÈ (Unit # unit) & ~cur.Export ÒÎÃÄÀ
          res := ÏÓÑÒÎ
        ÈÍÀ×Å
          res := cur
        ÊÎÍÅÖ;
        cur := ÏÓÑÒÎ
      ÈÍÀ×Å
        cur := cur.ñëåäóþù(òóÈìÿ)
      ÊÎÍÅÖ
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ res
  ÊÎÍÅÖ GetQIdent;

ÏÐÎÖÅÄÓÐÀ GetIdent*(Name: ìÒèïû.òóÓçåë): òóÈìÿ;
  ÏÅÐÅÌ
    cur, res: òóÈìÿ;
    line, col: ÖÅËÎÅ;
  ÍÀ×ÀËÎ
    res := ÏÓÑÒÎ;
    Êîîðä_Óñò(line, col);
    cur := unit.Idents.ñëåäóþù(òóÈìÿ);
    ÏÎÊÀ (cur # ÏÓÑÒÎ) & (cur.Name = Name) ÄÅËÀÒÜ
      res := cur;
      cur := ÏÓÑÒÎ
    ÀÅÑËÈ cur # ÏÓÑÒÎ ÄÅËÀÒÜ
      cur := cur.ïðåäûäóù(òóÈìÿ)
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ res
  ÊÎÍÅÖ GetIdent;

ÏÐÎÖÅÄÓÐÀ Relation*(Op: ÖÅËÎÅ): ÁÓËÅÂÎ;
  ÏÅÐÅÌ Res: ÁÓËÅÂÎ;
  ÍÀ×ÀËÎ
    ÂÛÁÎÐ Op ÈÇ
    |ìÊîíñò.îïÐàâíî, ìÊîíñò.îïÍåÐàâíî, ìÊîíñò.îïÌåíüøå, ìÊîíñò.îïÁîëüøå,
     lxLE, lxGE, ìÊîíñò.êñÂ, ìÊîíñò.êñÅÑÒÜ:
      Res := ÈÑÒÈÍÀ
    ÈÍÀ×Å
      Res := ËÎÆÜ
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ Res
  ÊÎÍÅÖ Relation;

ÏÐÎÖÅÄÓÐÀ Arith(a, b: ÄËÈÍÂÅÙ; T: òóÒèï; Op, line, col: ÖÅËÎÅ): ÄËÈÍÂÅÙ;
  CONST max = ìÑêàí.maxDBL;
  ÏÅÐÅÌ res: ÄËÈÍÂÅÙ;
  ÍÀ×ÀËÎ
    ÂÛÁÎÐ Op ÈÇ
    |ìÊîíñò.îïÏëþñ: res := a + b
    |ìÊîíñò.îïÌèíóñ: res := a - b
    |ìÊîíñò.îïÓìíîæ: res := a * b
    |ìÊîíñò.îïÄåëåí:
      ìÏðîâ.Òåñò(b # 0.0D0, line, col, 46);
      res := a / b
    |lxDIV:
      ìÏðîâ.Òåñò(~((a = ÄËÈÍ(FLT(ìÊîíñò.öåëîå_ìèí))) & (b = -1.0D0)), line, col, IOVER);
      res := ÄËÈÍ(FLT(FLOOR(a) DIV FLOOR(b)))
    |lxMOD:
      res := ÄËÈÍ(FLT(FLOOR(a) MOD FLOOR(b)))
    ÈÍÀ×Å
    ÊÎÍÅÖ;
    ìÏðîâ.Òåñò(~ìÓòèëü.ÅñëèÁåñêîíå÷(res), line, col, FOVER);
    ÂÛÁÎÐ T.tType ÈÇ
    |TINTEGER: 
      ìÏðîâ.Òåñò((res <= ÄËÈÍ(FLT(ìÊîíñò.öåëîå_ìàêñ))) & (res >= ÄËÈÍ(FLT(ìÊîíñò.öåëîå_ìèí))), line, col, IOVER)
    |TREAL:     
      ìÏðîâ.Òåñò((res <= ÄËÈÍ(ìÊîíñò.âåù_ìàêñ)) & (res >= -ÄËÈÍ(ìÊîíñò.âåù_ìàêñ)), line, col, FOVER)
    |TLONGREAL: 
      ìÏðîâ.Òåñò((res <= max) & (res >= -max), line, col, FOVER)
    ÈÍÀ×Å
    ÊÎÍÅÖ;
    ÅÑËÈ (res = 0.0D0) & (T.tType IN {TREAL, TLONGREAL}) ÈËÈ (ABS(res) < ÄËÈÍ(ìÊîíñò.âåù_ìèí)) & (T.tType = TREAL) ÒÎÃÄÀ
      ÂÛÁÎÐ Op ÈÇ
      |ìÊîíñò.îïÏëþñ:  ìÏðîâ.Òåñò(a = -b, line, col, UNDER)
      |ìÊîíñò.îïÌèíóñ: ìÏðîâ.Òåñò(a = b, line, col, UNDER)
      |ìÊîíñò.îïÓìíîæ:  ìÏðîâ.Òåñò((a = 0.0D0) ÈËÈ (b = 0.0D0), line, col, UNDER)
      |ìÊîíñò.îïÄåëåí: ìÏðîâ.Òåñò((a = 0.0D0), line, col, UNDER)
      ÈÍÀ×Å
      ÊÎÍÅÖ
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ res
  ÊÎÍÅÖ Arith;

ÏÐÎÖÅÄÓÐÀ strcmp(a, b: ÄËÈÍÂÅÙ; Op: ÖÅËÎÅ): ÄËÈÍÂÅÙ;
  ÏÅÐÅÌ
    sa, sb: òóÊîíñòÑòð;
    Res: ÄËÈÍÂÅÙ;
  ÍÀ×ÀËÎ
    sa := Ñòð_Ïîëó÷(a);
    sb := Ñòð_Ïîëó÷(b);
    ÂÛÁÎÐ Op ÈÇ
    |ìÊîíñò.îïÐàâíî, ìÊîíñò.îïÍåÐàâíî: Res := ÄËÈÍ(FLT(ORD(sa.ñòð = sb.ñòð)))
    |ìÊîíñò.îïÌåíüøå, ìÊîíñò.îïÁîëüøå: Res := ÄËÈÍ(FLT(ORD(sa.ñòð < sb.ñòð)))
    |lxLE, lxGE: Res := ÄËÈÍ(FLT(ORD(sa.ñòð <= sb.ñòð)))
    ÈÍÀ×Å
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ Res
  ÊÎÍÅÖ strcmp;

ÏÐÎÖÅÄÓÐÀ Calc*(a, b: ÄËÈÍÂÅÙ; Ta, Tb: òóÒèï; Op, line, col: ÖÅËÎÅ; ÏÅÐ Res: ÄËÈÍÂÅÙ; ÏÅÐ TRes: òóÒèï);
  ÏÅÐÅÌ c: ÄËÈÍÂÅÙ; ai, bi: ÖÅËÎÅ;
  ÍÀ×ÀËÎ
    ai := FLOOR(a);
    bi := FLOOR(b);
    ÅÑËÈ Op # ìÊîíñò.êñÂ ÒÎÃÄÀ
      ìÏðîâ.Òåñò(Ta = Tb, line, col, 37)
    ÊÎÍÅÖ;
    ÂÛÁÎÐ Op ÈÇ
    |ìÊîíñò.îïÏëþñ, ìÊîíñò.îïÌèíóñ, ìÊîíñò.îïÓìíîæ, ìÊîíñò.îïÄåëåí:
      ìÏðîâ.Òåñò(~((Op = ìÊîíñò.îïÄåëåí) & (Ta.tType = TINTEGER)), line, col, 37);
      ÅÑËÈ Ta.tType IN {TINTEGER, TREAL, TLONGREAL} ÒÎÃÄÀ
        Res := Arith(a, b, Ta, Op, line, col)
      ÀÅÑËÈ Ta.tType = TSET ÒÎÃÄÀ
        ÂÛÁÎÐ Op ÈÇ
        |ìÊîíñò.îïÏëþñ:  Res := ÄËÈÍ(FLT(ORD(BITS(ai) + BITS(bi))))
        |ìÊîíñò.îïÌèíóñ: Res := ÄËÈÍ(FLT(ORD(BITS(ai) - BITS(bi))))
        |ìÊîíñò.îïÓìíîæ:  Res := ÄËÈÍ(FLT(ORD(BITS(ai) * BITS(bi))))
        |ìÊîíñò.îïÄåëåí: Res := ÄËÈÍ(FLT(ORD(BITS(ai) / BITS(bi))))
        ÈÍÀ×Å
        ÊÎÍÅÖ
      ÈÍÀ×Å
        ìÏðîâ.Òåñò(ËÎÆÜ, line, col, 37)
      ÊÎÍÅÖ;
      TRes := Ta
    |lxDIV, lxMOD:
      ìÏðîâ.Òåñò(Ta.tType = TINTEGER, line, col, 37);
      ìÏðîâ.Òåñò(bi # 0, line, col, 48);
      TRes := Ta;
      Res := Arith(a, b, Ta, Op, line, col)
    |ìÊîíñò.îïÈ:
      ìÏðîâ.Òåñò(Ta.tType = TBOOLEAN, line, col, 37);
      Res := ÄËÈÍ(FLT(ORD((ai # 0) & (bi # 0))))
    |ìÊîíñò.lxOR:
      ìÏðîâ.Òåñò(Ta.tType = TBOOLEAN, line, col, 37);
      Res := ÄËÈÍ(FLT(ORD((ai # 0) ÈËÈ (bi # 0))))
    |ìÊîíñò.îïÐàâíî, ìÊîíñò.îïÍåÐàâíî:
      ÅÑËÈ Ta.tType = TSTRING ÒÎÃÄÀ
        Res := strcmp(a, b, Op)
      ÈÍÀ×Å
        Res := ÄËÈÍ(FLT(ORD(a = b)))
      ÊÎÍÅÖ;
      ÅÑËÈ Op = ìÊîíñò.îïÍåÐàâíî ÒÎÃÄÀ
        Res := ÄËÈÍ(FLT(ORD(Res = 0.0D0)))
      ÊÎÍÅÖ
    |ìÊîíñò.îïÌåíüøå, ìÊîíñò.îïÁîëüøå:
      ÅÑËÈ Op = ìÊîíñò.îïÁîëüøå ÒÎÃÄÀ
        c := a;
        a := b;
        b := c
      ÊÎÍÅÖ;
      ìÏðîâ.Òåñò(Ta.tType IN {TSTRING, TINTEGER, TREAL, TLONGREAL}, line, col, 37);
      ÅÑËÈ Ta.tType = TSTRING ÒÎÃÄÀ
        Res := strcmp(a, b, Op)
      ÈÍÀ×Å
        Res := ÄËÈÍ(FLT(ORD(a < b)))
      ÊÎÍÅÖ
    |lxLE, lxGE:
      ÅÑËÈ Op = lxGE ÒÎÃÄÀ
        c := a;
        a := b;
        b := c
      ÊÎÍÅÖ;
      ìÏðîâ.Òåñò(Ta.tType IN {TSTRING, TINTEGER, TREAL, TLONGREAL, TSET}, line, col, 37);
      ÅÑËÈ Ta.tType = TSTRING ÒÎÃÄÀ
        Res := strcmp(a, b, Op)
      ÀÅÑËÈ Ta.tType = TSET ÒÎÃÄÀ
        Res := ÄËÈÍ(FLT(ORD(BITS(FLOOR(a)) <= BITS(FLOOR(b)))))
      ÈÍÀ×Å
        Res := ÄËÈÍ(FLT(ORD(a <= b)))
      ÊÎÍÅÖ
    |ìÊîíñò.êñÂ:
      ìÏðîâ.Òåñò((Ta.tType = TINTEGER) & (Tb.tType = TSET), line, col, 37);
      ìÏðîâ.Òåñò(ASR(ai, 5) = 0, line, col, 49);
      Res := ÄËÈÍ(FLT(ORD(ai IN BITS(bi))))
    ÈÍÀ×Å
    ÊÎÍÅÖ;
    ÅÑËÈ Relation(Op) ÈËÈ (Op = ìÊîíñò.îïÈ) ÈËÈ (Op = ìÊîíñò.lxOR) ÒÎÃÄÀ
      TRes := sttypes[TBOOLEAN]
    ÊÎÍÅÖ
  ÊÎÍÅÖ Calc;

ÏÐÎÖÅÄÓÐÀ ConstExpr*(ÏÅÐ Value: ÄËÈÍÂÅÙ; ÏÅÐ T: òóÒèï);
  ÏÅÐÅÌ
    e: òÂûðàæåíèå;
    line, col: ÖÅËÎÅ;
  ÍÀ×ÀËÎ
    Const := ÈÑÒÈÍÀ;
    Êîîðä_Óñò(line, col);
    sizefunc := ËÎÆÜ;
    Expr(e);
    ìÏðîâ.Òåñò(~sizefunc & (e.eType = eCONST), line, col, 62);
    Value := e.Value;
    T := e.T;
    Const := ËÎÆÜ
  ÊÎÍÅÖ ConstExpr;

ÏÐÎÖÅÄÓÐÀ IdType*(ÏÅÐ line, col: ÖÅËÎÅ): òóÒèï;
  ÏÅÐÅÌ
    id: òóÈìÿ;
    Name: ìÒèïû.òóÓçåë;
    Unit: òÌîäóëü;
    Res: òóÒèï;
  ÍÀ×ÀËÎ
    Res := ÏÓÑÒÎ;
    Name := ìÑêàí.id;
    id := GetIdent(Name);
    ÅÑËÈ id = ÏÓÑÒÎ ÒÎÃÄÀ
      Êîîðä_Óñò(line, col);
      NamePtrBase := Name;
      Êëþ÷Ñëåä_Ïîëó÷
    ÈÍÀ×Å
      ÅÑËÈ id.iType = IDTYPE ÒÎÃÄÀ
        Êîîðä_Óñò(line, col);
        Êëþ÷Ñëåä_Ïîëó÷;
        Res := id.T
      ÀÅÑËÈ id.iType = IDMOD ÒÎÃÄÀ
        Unit := id.Unit;
        Êëþ÷Ñëåä_Ïîëó÷;
        Êëþ÷_Ïðîâåðèòü(lxDot);
        Êëþ÷Ñëåä_Ïîëó÷;
        Êëþ÷_Ïðîâåðèòü(lxIDENT);
        Name := ìÑêàí.id;
        NamePtrBase := Name;
        id := GetQIdent(Unit, Name);
        ÅÑËÈ Unit # unit ÒÎÃÄÀ
          ìÏðîâ.Òåñò2(id # ÏÓÑÒÎ, 42);
          ìÏðîâ.Òåñò2(id.iType = IDTYPE, 77);
          Êîîðä_Óñò(line, col);
          Êëþ÷Ñëåä_Ïîëó÷;
          Res := id.T
        ÈÍÀ×Å
          ÅÑËÈ id = ÏÓÑÒÎ ÒÎÃÄÀ
            ìÏðîâ.Òåñò2((unit.Level = 3) & unit.typedecl, 42);
            Êîîðä_Óñò(line, col);
            Êëþ÷Ñëåä_Ïîëó÷;
            Res := ÏÓÑÒÎ
          ÈÍÀ×Å
            ìÏðîâ.Òåñò2(id.iType = IDTYPE, 77);
            Êîîðä_Óñò(line, col);
            Êëþ÷Ñëåä_Ïîëó÷;
            Res := id.T
          ÊÎÍÅÖ
        ÊÎÍÅÖ
      ÈÍÀ×Å
        ìÏðîâ.Òåñò2(ËÎÆÜ, 77)
      ÊÎÍÅÖ
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ Res
  ÊÎÍÅÖ IdType;

ÏÐÎÖÅÄÓÐÀ FieldOffset(Align, RecSize: ÖÅËÎÅ): ÖÅËÎÅ;
  ÍÀ×ÀËÎ
    ìÏðîâ.Òåñò2(RecSize <= ìÊîíñò.öåëîå_ìàêñ - (Align - RecSize MOD Align) MOD Align, 83)
    ÂÅÐÍÓÒÜ RecSize + (Align - RecSize MOD Align) MOD Align
  ÊÎÍÅÖ FieldOffset;

ÏÐÎÖÅÄÓÐÀ Dim*(T: òóÒèï): ÖÅËÎÅ;
  ÏÅÐÅÌ n: ÖÅËÎÅ;
  ÍÀ×ÀËÎ
    n := 0;
    ÏÎÊÀ (T.tType = TARRAY) & (T.Len = 0) ÄÅËÀÒÜ
      ÄÎÁ(n);
      T := T.Base
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ n
  ÊÎÍÅÖ Dim;

ÏÐÎÖÅÄÓÐÀ SetFields(Tr, Tf: òóÒèï; Rec: ÁÓËÅÂÎ);
  ÏÅÐÅÌ
    cur: òóÏîëå;
  ÍÀ×ÀËÎ
    cur := Tr.Fields.ïðåäûäóù(òóÏîëå);
    ÏÎÊÀ cur.T # ÏÓÑÒÎ ÄÅËÀÒÜ
      cur := cur.ñëåäóþù(òóÏîëå)
    ÊÎÍÅÖ;
    ÏÎÊÀ cur # ÏÓÑÒÎ ÄÅËÀÒÜ
      cur.T := Tf;
      ÅÑËÈ Rec ÒÎÃÄÀ
        ÅÑËÈ Tf.Align > Tr.Align ÒÎÃÄÀ
          Tr.Align := Tf.Align
        ÊÎÍÅÖ;
        ÅÑËÈ Tr.Rec = record ÒÎÃÄÀ
          cur.Offset := FieldOffset(Tf.Align, Tr.ðàçìåð);
          ìÏðîâ.Òåñò2(cur.Offset <= ìÊîíñò.öåëîå_ìàêñ - Tf.ðàçìåð, 83);
          Tr.ðàçìåð := cur.Offset + Tf.ðàçìåð
        ÀÅÑËÈ Tr.Rec = noalign ÒÎÃÄÀ
          cur.Offset := FieldOffset(1, Tr.ðàçìåð);
          ìÏðîâ.Òåñò2(cur.Offset <= ìÊîíñò.öåëîå_ìàêñ - Tf.ðàçìåð, 83);
          Tr.ðàçìåð := cur.Offset + Tf.ðàçìåð
        ÀÅÑËÈ Tr.Rec = union ÒÎÃÄÀ
          ÅÑËÈ Tf.ðàçìåð > Tr.ðàçìåð ÒÎÃÄÀ
            Tr.ðàçìåð := Tf.ðàçìåð
          ÊÎÍÅÖ;
          cur.Offset := 0
        ÊÎÍÅÖ
      ÈÍÀ×Å
        Tr.Len := Tr.Len + 4 * (ORD((Tf.tType = TRECORD) & cur.ByRef) + Dim(Tf) + ORD((Tf.tType = TLONGREAL) & ~cur.ByRef) + 1)
      ÊÎÍÅÖ;
      cur := cur.ñëåäóþù(òóÏîëå)
    ÊÎÍÅÖ
  ÊÎÍÅÖ SetFields;

ÏÐÎÖÅÄÓÐÀ GetField*(T: òóÒèï; Name: ìÒèïû.òóÓçåë): òóÏîëå;
  ÏÅÐÅÌ
    cur, Res: òóÏîëå;
  ÍÀ×ÀËÎ
    Res := ÏÓÑÒÎ;
    cur := T.Fields.ïðåäûäóù(òóÏîëå);
    ÏÎÊÀ (cur # ÏÓÑÒÎ) & (cur.Name = Name) ÄÅËÀÒÜ
      Res := cur;
      cur := ÏÓÑÒÎ
    ÀÅÑËÈ cur # ÏÓÑÒÎ ÄÅËÀÒÜ
      cur := cur.ñëåäóþù(òóÏîëå)
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ Res
  ÊÎÍÅÖ GetField;

ÏÐÎÖÅÄÓÐÀ Unique(T: òóÒèï; Name: ìÒèïû.òóÓçåë): ÁÓËÅÂÎ;
  ÏÅÐÅÌ
    field: òóÏîëå;
    res: ÁÓËÅÂÎ;
  ÍÀ×ÀËÎ
    res := ÈÑÒÈÍÀ;
    ÏÎÊÀ (T # ÏÓÑÒÎ) & res ÄÅËÀÒÜ
      field := GetField(T, Name);
      ÅÑËÈ field # ÏÓÑÒÎ ÒÎÃÄÀ
        ÅÑËÈ (field.Unit = unit) ÈËÈ field.Export ÒÎÃÄÀ
          res := ËÎÆÜ
        ÊÎÍÅÖ
      ÊÎÍÅÖ;
      T := T.Base
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ res
  ÊÎÍÅÖ Unique;

ÏÐÎÖÅÄÓÐÀ notrecurs(id: ÁÓËÅÂÎ; T: òóÒèï): ÁÓËÅÂÎ;
    ÂÅÐÍÓÒÜ ~(id & (unit.Idents.ñëåäóþù(òóÈìÿ).iType = IDTYPE) & (unit.Idents.ñëåäóþù(òóÈìÿ).T = T) &
            (T.tType IN {TRECORD, TARRAY}))
  ÊÎÍÅÖ notrecurs;

ÏÐÎÖÅÄÓÐÀ ReadFields(T: òóÒèï);
  ÏÅÐÅÌ
    Name: ìÒèïû.òóÓçåë;
    field: òóÏîëå;
    Tf: òóÒèï;
    line, col: ÖÅËÎÅ;
    id_T: ÁÓËÅÂÎ;
  ÍÀ×ÀËÎ
    ÏÎÊÀ ìÑêàí.ñóùíîñòü = lxIDENT ÄÅËÀÒÜ
      Name := ìÑêàí.id;
      ìÏðîâ.Òåñò2(Unique(T, Name), 30);
      ÍÎÂ(field);
      ÏàìÎø_Ïðîâåðèòü(field = ÏÓÑÒÎ);
      ìÑïèñ.Äîáàâèòü(T.Fields, field);
      field.Name := Name;
      field.T := ÏÓÑÒÎ;
      field.Export := ËÎÆÜ;
      field.Unit := unit;
      Êëþ÷Ñëåä_Ïîëó÷;
      ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.îïÓìíîæ ÒÎÃÄÀ
        ìÏðîâ.Òåñò2(unit.Level = 3, 89);
        ìÏðîâ.Òåñò2(unit.typedecl, 91);
        ìÏðîâ.Òåñò2(unit.ExportType, 92);
        field.Export := ÈÑÒÈÍÀ;
        Êëþ÷Ñëåä_Ïîëó÷
      ÊÎÍÅÖ;
      ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.îïÇàïÿòàÿ ÒÎÃÄÀ
        Êëþ÷Ñëåä_Ïîëó÷;
        Êëþ÷_Ïðîâåðèòü(lxIDENT)
      ÀÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.îïÄâîåòî÷ ÒÎÃÄÀ
        Êëþ÷Ñëåä_Ïîëó÷;
        Êîîðä_Óñò(line, col);
        id_T := ìÑêàí.ñóùíîñòü = lxIDENT;
        Tf:= pParseType(line, col);
        ìÏðîâ.Òåñò(Tf # ÏÓÑÒÎ, line, col, 42);
        ìÏðîâ.Òåñò(notrecurs(id_T, Tf), line, col, 96);
        SetFields(T, Tf, ÈÑÒÈÍÀ);
        ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.îïÒ÷êÇïò ÒÎÃÄÀ
          Êëþ÷Ñëåä_Ïîëó÷;
          Êëþ÷_Ïðîâåðèòü(lxIDENT)
        ÈÍÀ×Å
          ìÏðîâ.Òåñò2(ìÑêàí.ñóùíîñòü = ìÊîíñò.êñÊÎÍÅÖ, 86)
        ÊÎÍÅÖ
      ÈÍÀ×Å
        ìÏðîâ.Òåñò2(ËÎÆÜ, 85)
      ÊÎÍÅÖ
    ÊÎÍÅÖ
  ÊÎÍÅÖ ReadFields;

ÏÐÎÖÅÄÓÐÀ OpenBase*(T: òóÒèï): òóÒèï;
  ÍÀ×ÀËÎ
    ÏÎÊÀ (T.tType = TARRAY) & (T.Len = 0) ÄÅËÀÒÜ
      T := T.Base
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ T
  ÊÎÍÅÖ OpenBase;

ÏÐÎÖÅÄÓÐÀ SetVars(T: òóÒèï);
  ÏÅÐÅÌ
    cur: òóÈìÿ;
    n: ÖÅËÎÅ;
  ÍÀ×ÀËÎ
    cur := unit.Idents.ñëåäóþù(òóÈìÿ);
    ÏÎÊÀ cur.T = ÏÓÑÒÎ ÄÅËÀÒÜ
      cur := cur.ïðåäûäóù(òóÈìÿ)
    ÊÎÍÅÖ;
    cur := cur.ñëåäóþù(òóÈìÿ);
    ÏÎÊÀ cur # ÏÓÑÒÎ ÄÅËÀÒÜ
      cur.T := T;
      ÅÑËÈ cur.Export ÒÎÃÄÀ
        ìÏðîâ.Òåñò(~(T.tType IN {TRECORD, TARRAY}), cur.line, cur.col, 90)
      ÊÎÍÅÖ;
      ÅÑËÈ(cur.VarKind = paramvar) ÈËÈ (cur.VarKind = param) & (T.tType IN {TRECORD, TARRAY}) ÒÎÃÄÀ
        n := 4 * (1 + Dim(T) + ORD((cur.VarKind = paramvar) & (T.tType = TRECORD)))
      ÈÍÀ×Å
        n := T.ðàçìåð;
        ìÏðîâ.Òåñò2(n <= ìÊîíñò.öåëîå_ìàêñ - ìÏàì.Âûðîâíÿòü(n), 93);
        n := n + ìÏàì.Âûðîâíÿòü(n)
      ÊÎÍÅÖ;
      ÅÑËÈ cur.Level = 3 ÒÎÃÄÀ
        cur.Offset := ProgSize;
        ìÏðîâ.Òåñò2(ProgSize <= ìÊîíñò.öåëîå_ìàêñ - n, 93);
        ProgSize := ProgSize + n;
        ìÏðîâ.Òåñò2(ProgSize <= ìÊîíñò.öåëîå_ìàêñ - ìÏàì.Âûðîâíÿòü(ProgSize), 93);
        ProgSize := ProgSize + ìÏàì.Âûðîâíÿòü(ProgSize)
      ÈÍÀ×Å
        ÅÑËÈ cur.VarKind = 0 ÒÎÃÄÀ
          cur.Offset := curBlock.ParamSize - curBlock.VarSize - n
        ÈÍÀ×Å
          cur.Offset := curBlock.VarSize - 8 + 4 * (cur.Level + ORD((cur.VarKind = paramvar) & (T.tType = TRECORD)))
        ÊÎÍÅÖ
      ÊÎÍÅÖ;
      ìÏðîâ.Òåñò2(curBlock.VarSize <= ìÊîíñò.öåëîå_ìàêñ - n, 93);
      curBlock.VarSize := curBlock.VarSize + n;
      ìÏðîâ.Òåñò2(curBlock.VarSize <= ìÊîíñò.öåëîå_ìàêñ - ìÏàì.Âûðîâíÿòü(curBlock.VarSize), 93);
      curBlock.VarSize := curBlock.VarSize + ìÏàì.Âûðîâíÿòü(curBlock.VarSize);
      ÅÑËÈ cur.VarKind # 0 ÒÎÃÄÀ
        curBlock.ParamSize := curBlock.VarSize
      ÊÎÍÅÖ;
      cur := cur.ñëåäóþù(òóÈìÿ)
    ÊÎÍÅÖ
  ÊÎÍÅÖ SetVars;

ÏÐÎÖÅÄÓÐÀ Òèï_Ñîçäàòü(tType, Len, Size, Number: ÖÅËÎÅ; Base: òóÒèï; Fields: ÁÓËÅÂÎ; NewType: òóÒèï): òóÒèï;
  ÏÅÐÅÌ
    nov: òóÒèï;
  ÍÀ×ÀËÎ
    ÅÑËÈ NewType = ÏÓÑÒÎ ÒÎÃÄÀ
      ÍÎÂ(nov);
      ÏàìÎø_Ïðîâåðèòü(nov = ÏÓÑÒÎ)
    ÈÍÀ×Å
      nov := NewType
    ÊÎÍÅÖ;
    ìÑïèñ.Äîáàâèòü(types, nov);
    nov.tType := tType;
    nov.Len := Len;
    nov.ðàçìåð := Size;
    nov.Base := Base;
    nov.Fields := ÏÓÑÒÎ;
    nov.Number := Number;
    ÅÑËÈ Fields ÒÎÃÄÀ
      nov.Fields := ìÑïèñ.Ñîçäàòü();
      ÏàìÎø_Ïðîâåðèòü(nov.Fields = ÏÓÑÒÎ)
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ nov
  ÊÎÍÅÖ Òèï_Ñîçäàòü;

ÏÐÎÖÅÄÓÐÀ FormalType(ÏÅÐ line, col: ÖÅËÎÅ): òóÒèï;
  ÏÅÐÅÌ
    TA: òóÒèï;
  ÍÀ×ÀËÎ
    ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.êñÌÀÑÑÈÂ ÒÎÃÄÀ
      Êëþ÷Ñëåä_Ïîëó÷;
      Êëþ÷_Ïðîâåðèòü(ìÊîíñò.êñÈÇ);
      Êëþ÷Ñëåä_Ïîëó÷;
      TA := Òèï_Ñîçäàòü(TARRAY, 0, 0, 0, FormalType(line, col), ËÎÆÜ, ÏÓÑÒÎ)
    ÈÍÀ×Å
      Êëþ÷_Ïðîâåðèòü(lxIDENT);
      TA := IdType(line, col);
      ìÏðîâ.Òåñò(TA # ÏÓÑÒÎ, line, col, 42);
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ TA
  ÊÎÍÅÖ FormalType;

ÏÐÎÖÅÄÓÐÀ Section(T: òóÒèï);
  ÏÅÐÅÌ
      Name: ìÒèïû.òóÓçåë;
      ByRef, cont: ÁÓËÅÂÎ;
      field: òóÏîëå;
      Tf: òóÒèï;
      fp: òóÈìÿ;
      line, col: ÖÅËÎÅ;
      proc: ÁÓËÅÂÎ;
  ÍÀ×ÀËÎ
    proc := T = ÏÓÑÒÎ;
    ÅÑËÈ proc ÒÎÃÄÀ
      T := curBlock.T
    ÊÎÍÅÖ;
    ìÏðîâ.Òåñò2((ìÑêàí.ñóùíîñòü = lxIDENT) ÈËÈ (ìÑêàí.ñóùíîñòü = ìÊîíñò.êñÏÅÐÅÌ), 84);
    ByRef := ËÎÆÜ;
    ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.êñÏÅÐÅÌ ÒÎÃÄÀ
      ByRef := ÈÑÒÈÍÀ;
      Êëþ÷Ñëåä_Ïîëó÷;
      Êëþ÷_Ïðîâåðèòü(lxIDENT)
    ÊÎÍÅÖ;
    cont := ÈÑÒÈÍÀ;
    ÏÎÊÀ cont ÄÅËÀÒÜ
      Name := ìÑêàí.id;
      ìÏðîâ.Òåñò2(GetField(T, Name) = ÏÓÑÒÎ, 30);
      ÍÎÂ(field);
      ÏàìÎø_Ïðîâåðèòü(field = ÏÓÑÒÎ);
      ìÑïèñ.Äîáàâèòü(T.Fields, field);
      field.Name := Name;
      field.T := ÏÓÑÒÎ;
      field.ByRef := ByRef;
      ÅÑËÈ proc ÒÎÃÄÀ
        PushIdent(Name, line, col, IDVAR, ÏÓÑÒÎ, ÏÓÑÒÎ, ËÎÆÜ, 0);
        ÄÎÁ(curBlock.ParamCount);
        fp := unit.Idents.ñëåäóþù(òóÈìÿ);
        ÅÑËÈ ByRef ÒÎÃÄÀ
          fp.VarKind := paramvar
        ÈÍÀ×Å
          fp.VarKind := param
        ÊÎÍÅÖ
      ÊÎÍÅÖ;
      Êëþ÷Ñëåä_Ïîëó÷;
      ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.îïÇàïÿòàÿ ÒÎÃÄÀ
        Êëþ÷Ñëåä_Ïîëó÷;
        Êëþ÷_Ïðîâåðèòü(lxIDENT)
      ÀÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.îïÄâîåòî÷ ÒÎÃÄÀ
        Êëþ÷Ñëåä_Ïîëó÷;
        Tf := FormalType(line, col);
        ìÏðîâ.Òåñò(Dim(Tf) <= X86.ADIM, line, col, 110);
        SetFields(T, Tf, ËÎÆÜ);
        ÅÑËÈ proc ÒÎÃÄÀ
          SetVars(Tf)
        ÊÎÍÅÖ;
        cont := ËÎÆÜ
      ÈÍÀ×Å
        ìÏðîâ.Òåñò2(ËÎÆÜ, 85)
      ÊÎÍÅÖ
    ÊÎÍÅÖ
  ÊÎÍÅÖ Section;

ÏÐÎÖÅÄÓÐÀ ParamType(T: òóÒèï);
  ÏÅÐÅÌ break: ÁÓËÅÂÎ;
  ÍÀ×ÀËÎ
    ÅÑËÈ (ìÑêàí.ñóùíîñòü = lxIDENT) ÈËÈ (ìÑêàí.ñóùíîñòü = ìÊîíñò.êñÏÅÐÅÌ) ÒÎÃÄÀ
      break := ËÎÆÜ;
      ÏÎÂÒÎÐßÒÜ
        Section(T);
        ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.îïÒ÷êÇïò ÒÎÃÄÀ
          Êëþ÷Ñëåä_Ïîëó÷
        ÈÍÀ×Å
          break := ÈÑÒÈÍÀ
        ÊÎÍÅÖ
      ÏÎÊÀÍÅ break
    ÊÎÍÅÖ
  ÊÎÍÅÖ ParamType;

ÏÐÎÖÅÄÓÐÀ AddPtrBase(Name: ìÒèïû.òóÓçåë; line, col: ÖÅËÎÅ; T: òóÒèï);
  ÏÅÐÅÌ nov: PTRBASE;
  ÍÀ×ÀËÎ
    ÍÎÂ(nov);
    ÏàìÎø_Ïðîâåðèòü(nov = ÏÓÑÒÎ);
    nov.Name := Name;
    nov.line := line;
    nov.col := col;
    nov.Ptr := T;
    ìÑïèñ.Äîáàâèòü(PtrBases, nov)
  ÊÎÍÅÖ AddPtrBase;

ÏÐÎÖÅÄÓÐÀ FormalList(T: òóÒèï; ÏÅÐ Res: òóÒèï);
  ÏÅÐÅÌ line, col: ÖÅËÎÅ;
  ÍÀ×ÀËÎ
    ÅÑËÈ ìÑêàí.ñóùíîñòü = lxLRound ÒÎÃÄÀ
      Êëþ÷Ñëåä_Ïîëó÷;
      ParamType(T);
      Êëþ÷_Ïðîâåðèòü(ìÊîíñò.îïÑêîáêàÏðÊð);
      Êëþ÷Ñëåä_Ïîëó÷;
      ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.îïÄâîåòî÷ ÒÎÃÄÀ
        Êëþ÷Ñëåä_Ïîëó÷;
        Êëþ÷_Ïðîâåðèòü(lxIDENT);
        Res := IdType(line, col);
        ìÏðîâ.Òåñò(Res # ÏÓÑÒÎ, line, col, 42);
        ìÏðîâ.Òåñò(~(Res.tType IN {TRECORD, TARRAY}), line, col, 82)
      ÊÎÍÅÖ
    ÊÎÍÅÖ
  ÊÎÍÅÖ FormalList;

ÏÐÎÖÅÄÓÐÀ CallFlag(ÏÅÐ Call: ÖÅËÎÅ): ÁÓËÅÂÎ;
  ÏÅÐÅÌ
    flag: ìÑòð.òÑòðîêà;
    res: ÁÓËÅÂÎ;
  ÍÀ×ÀËÎ
    res := ìÑêàí.ñóùíîñòü = ìÊîíñò.îïÑêîáêàËåâÊâ;
    ÅÑËÈ res ÒÎÃÄÀ
      Êëþ÷Ñëåä_Ïîëó÷;
      ìÑêàí.GetLexStr(flag);
      ÅÑËÈ flag = "cdecl" ÒÎÃÄÀ
        Call := cdecl
      ÀÅÑËÈ flag = "stdcall" ÒÎÃÄÀ
        Call := stdcall
      ÀÅÑËÈ flag = "winapi" ÒÎÃÄÀ
        ìÏðîâ.Òåñò2(winplatf, 50);
        Call := winapi
      ÈÍÀ×Å
        ìÏðîâ.Òåñò2(ËÎÆÜ, 44)
      ÊÎÍÅÖ;
      Êëþ÷Ñëåä_Ïîëó÷;
      Êëþ÷_Ïðîâåðèòü(ìÊîíñò.îïÑêîáêàÏðÊâ);
      Êëþ÷Ñëåä_Ïîëó÷;
    ÈÍÀ×Å
      Call := defcall
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ res
  ÊÎÍÅÖ CallFlag;

ÏÐÎÖÅÄÓÐÀ RecFlag(ÏÅÐ rec: ÖÅËÎÅ): ÁÓËÅÂÎ;
  ÏÅÐÅÌ
    flag: ìÑòð.òÑòðîêà;
    res: ÁÓËÅÂÎ;
  ÍÀ×ÀËÎ
    res := ìÑêàí.ñóùíîñòü = ìÊîíñò.îïÑêîáêàËåâÊâ;
    ÅÑËÈ res ÒÎÃÄÀ
      Êëþ÷Ñëåä_Ïîëó÷;
      ìÑêàí.GetLexStr(flag);
      ÅÑËÈ flag = "union" ÒÎÃÄÀ
        rec := union
      ÀÅÑËÈ flag = "noalign" ÒÎÃÄÀ
        rec := noalign
      ÈÍÀ×Å
        ìÏðîâ.Òåñò2(ËÎÆÜ, 103)
      ÊÎÍÅÖ;
      Êëþ÷Ñëåä_Ïîëó÷;
      Êëþ÷_Ïðîâåðèòü(ìÊîíñò.îïÑêîáêàÏðÊâ);
      Êëþ÷Ñëåä_Ïîëó÷;
    ÈÍÀ×Å
      rec := record
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ res
  ÊÎÍÅÖ RecFlag;

ÏÐÎÖÅÄÓÐÀ StructType(Comma: ÁÓËÅÂÎ; NewType: òóÒèï): òóÒèï;
  ÏÅÐÅÌ
    v: ÄËÈÍÂÅÙ;
    T, nov: òóÒèï;
    line, col, line2, col2: ÖÅËÎÅ;
    id_T: ÁÓËÅÂÎ;
  ÍÀ×ÀËÎ
    ÂÛÁÎÐ ìÑêàí.ñóùíîñòü ÈÇ
    |ìÊîíñò.êñÌÀÑÑÈÂ, ìÊîíñò.îïÇàïÿòàÿ:
      ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.îïÇàïÿòàÿ ÒÎÃÄÀ
        ìÏðîâ.Òåñò2(Comma, 39)
      ÊÎÍÅÖ;
      Êëþ÷Ñëåä_Ïîëó÷;
      Êîîðä_Óñò(line, col);
      ConstExpr(v, T);
      ìÏðîâ.Òåñò(T.tType = TINTEGER, line, col, 52);
      ìÏðîâ.Òåñò(v > 0.0D0, line, col, 78);
      nov := Òèï_Ñîçäàòü(TARRAY, FLOOR(v), 0, 0, ÏÓÑÒÎ, ËÎÆÜ, NewType);
      ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.îïÇàïÿòàÿ ÒÎÃÄÀ
        nov.Base := StructType(ÈÑÒÈÍÀ, ÏÓÑÒÎ)
      ÀÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.êñÈÇ ÒÎÃÄÀ
        Êëþ÷Ñëåä_Ïîëó÷;
        Êîîðä_Óñò(line, col);
        id_T := ìÑêàí.ñóùíîñòü = lxIDENT;
        nov.Base := pParseType(line, col);
        ìÏðîâ.Òåñò(nov.Base # ÏÓÑÒÎ, line, col, 42);
        ìÏðîâ.Òåñò(notrecurs(id_T, nov.Base), line, col, 96)
      ÈÍÀ×Å
        ìÏðîâ.Òåñò2(ËÎÆÜ, 79)
      ÊÎÍÅÖ;
      ìÏðîâ.Òåñò2(nov.Base.ðàçìåð <= ìÊîíñò.öåëîå_ìàêñ DIV nov.Len, 83);
      nov.ðàçìåð := nov.Base.ðàçìåð * nov.Len;
      nov.Align := nov.Base.Align
    |ìÊîíñò.êñÇÀÏÈÑÜ:
      Êëþ÷Ñëåä_Ïîëó÷;
      ÄÎÁ(RecCount);
      nov := Òèï_Ñîçäàòü(TRECORD, 0, 0, RecCount, ÏÓÑÒÎ, ÈÑÒÈÍÀ, NewType);
      nov.Align := 1;
      Êîîðä_Óñò(line, col);
      ÅÑËÈ RecFlag(nov.Rec) ÒÎÃÄÀ
        ìÏðîâ.Òåñò(unit.sys, line, col, 111)
      ÊÎÍÅÖ;
      Êîîðä_Óñò(line, col);
      ÅÑËÈ ìÑêàí.ñóùíîñòü = lxLRound ÒÎÃÄÀ
        Êëþ÷Ñëåä_Ïîëó÷;
        Êîîðä_Óñò(line2, col2);
        Êëþ÷_Ïðîâåðèòü(lxIDENT);
        nov.Base := IdType(line, col);
        ìÏðîâ.Òåñò(nov.Base # ÏÓÑÒÎ, line, col, 42);
        ìÏðîâ.Òåñò(nov.Base.tType = TRECORD, line, col, 80);
        ìÏðîâ.Òåñò(notrecurs(ÈÑÒÈÍÀ, nov.Base), line, col, 96);
        nov.ðàçìåð := nov.Base.ðàçìåð;
        nov.Align := nov.Base.Align;
        Êëþ÷_Ïðîâåðèòü(ìÊîíñò.îïÑêîáêàÏðÊð);
        Êëþ÷Ñëåä_Ïîëó÷;
        ìÏðîâ.Òåñò(nov.Rec = record, line, col, 112);
        ìÏðîâ.Òåñò(nov.Base.Rec = record, line2, col2, 113)
      ÊÎÍÅÖ;
      ReadFields(nov);
      Êëþ÷_Ïðîâåðèòü(ìÊîíñò.êñÊÎÍÅÖ);
      nov.ðàçìåð := X86.Align(nov.ðàçìåð, nov.Align);
      ÅÑËÈ nov.Base # ÏÓÑÒÎ ÒÎÃÄÀ
        X86.AddRec(nov.Base.Number)
      ÈÍÀ×Å
        X86.AddRec(0)
      ÊÎÍÅÖ;
      Êëþ÷Ñëåä_Ïîëó÷
    |ìÊîíñò.êñÓÊÀÇÀÒÅËÜ:
      Êëþ÷Ñëåä_Ïîëó÷;
      Êëþ÷_Ïðîâåðèòü(ìÊîíñò.êñÄÎ);
      Êëþ÷Ñëåä_Ïîëó÷;
      nov := Òèï_Ñîçäàòü(TPOINTER, 0, 4, 0, ÏÓÑÒÎ, ËÎÆÜ, NewType);
      nov.Align := 4;
      Êîîðä_Óñò(line, col);
      nov.Base := pParseType(line, col);
      ÅÑËÈ nov.Base = ÏÓÑÒÎ ÒÎÃÄÀ
        ìÏðîâ.Òåñò(unit.typedecl, line, col, 42);
        AddPtrBase(NamePtrBase, line, col, nov)
      ÈÍÀ×Å
        ìÏðîâ.Òåñò(nov.Base.tType = TRECORD, line, col, 81)
      ÊÎÍÅÖ
    |ìÊîíñò.êñÏÐÎÖÅÄÓÐÀ:
      Êëþ÷Ñëåä_Ïîëó÷;
      nov := Òèï_Ñîçäàòü(TPROC, 0, 4, 0, sttypes[TVOID], ÈÑÒÈÍÀ, NewType);
      Êîîðä_Óñò(line, col);
      ÅÑËÈ CallFlag(nov.Call) ÒÎÃÄÀ
        ìÏðîâ.Òåñò(unit.sys, line, col, 111)
      ÊÎÍÅÖ;
      nov.Align := 4;
      FormalList(nov, nov.Base)
    ÈÍÀ×Å
      ìÏðîâ.Òåñò2(ËÎÆÜ, 39)
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ nov
  ÊÎÍÅÖ StructType;

ÏÐÎÖÅÄÓÐÀ ParseType(ÏÅÐ line, col: ÖÅËÎÅ): òóÒèï;
  ÏÅÐÅÌ
    Res: òóÒèï;
  ÍÀ×ÀËÎ
    ÅÑËÈ ìÑêàí.ñóùíîñòü = lxIDENT ÒÎÃÄÀ
      Res := IdType(line, col)
    ÈÍÀ×Å
      Res := StructType(ËÎÆÜ, ÏÓÑÒÎ)
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ Res
  ÊÎÍÅÖ ParseType;

ÏÐÎÖÅÄÓÐÀ PopBlock;
  ÏÅÐÅÌ
    cur: òóÈìÿ;
    n: ÖÅËÎÅ;
  ÍÀ×ÀËÎ
    cur := unit.Idents.ñëåäóþù(òóÈìÿ);
    n := 0;
    ÏÎÊÀ cur.iType # IDGUARD ÄÅËÀÒÜ
      cur := cur.ïðåäûäóù(òóÈìÿ);
      ÄÎÁ(n)
    ÊÎÍÅÖ;
    cur := cur.ïðåäûäóù(òóÈìÿ);
    ÄÎÁ(n);
    unit.Idents.ñ÷åò÷èê := unit.Idents.ñ÷åò÷èê - n;
    unit.Idents.ñëåäóþù := cur;
    cur.ñëåäóþù := ÏÓÑÒÎ;
    ÂÛ×(unit.Level)
  ÊÎÍÅÖ PopBlock;

ÏÐÎÖÅÄÓÐÀ LinkPtr;
  ÏÅÐÅÌ
    cur: PTRBASE;
    id: òóÈìÿ;
  ÍÀ×ÀËÎ
    cur := PtrBases.ïðåäûäóù(PTRBASE);
    ÏÎÊÀ cur # ÏÓÑÒÎ ÄÅËÀÒÜ
      id := GetIdent(cur.Name);
      ìÏðîâ.Òåñò(id # ÏÓÑÒÎ, cur.line, cur.col, 42);
      ìÏðîâ.Òåñò(id.T.tType = TRECORD, cur.line, cur.col, 81);
      cur.Ptr.Base := id.T;
      cur := cur.ñëåäóþù(PTRBASE)
    ÊÎÍÅÖ;
    ìÑïèñ.Î÷èñòèòü(PtrBases)
  ÊÎÍÅÖ LinkPtr;

ÏÐÎÖÅÄÓÐÀ DeclSeq;
  ÏÅÐÅÌ
    Value: ÄËÈÍÂÅÙ;
    T, NewType: òóÒèï;
    Name: ìÒèïû.òóÓçåë;
    line, col, Call: ÖÅËÎÅ;
    Export, func: ÁÓËÅÂÎ;
    last, id: òóÈìÿ;
    e: òÂûðàæåíèå;

    ÏÐÎÖÅÄÓÐÀ IdentDef;
    ÍÀ×ÀËÎ
      Name := ìÑêàí.id;
      Êîîðä_Óñò(line, col);
      Êëþ÷Ñëåä_Ïîëó÷;
      Export := ËÎÆÜ;
      ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.îïÓìíîæ ÒÎÃÄÀ
        ìÏðîâ.Òåñò2(unit.Level = 3, 89);
        Export := ÈÑÒÈÍÀ;
        Êëþ÷Ñëåä_Ïîëó÷
      ÊÎÍÅÖ
    ÊÎÍÅÖ IdentDef;

  ÍÀ×ÀËÎ
    ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.êñÊÎÍÑÒ ÒÎÃÄÀ
      Êëþ÷Ñëåä_Ïîëó÷;
      ÏÎÊÀ ìÑêàí.ñóùíîñòü = lxIDENT ÄÅËÀÒÜ
        IdentDef;
        PushIdent(Name, line, col, IDCONST, ÏÓÑÒÎ, ÏÓÑÒÎ, Export, 0);
        last := unit.Idents.ñëåäóþù(òóÈìÿ);
        Êëþ÷_Ïðîâåðèòü(ìÊîíñò.îïÐàâíî);
        Êëþ÷Ñëåä_Ïîëó÷;
        ConstExpr(Value, T);
        Êëþ÷_Ïðîâåðèòü(ìÊîíñò.îïÒ÷êÇïò);
        last.Value := Value;
        last.T := T;
        Êëþ÷Ñëåä_Ïîëó÷
      ÊÎÍÅÖ
    ÊÎÍÅÖ;
    ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.êñÒÈÏÛ ÒÎÃÄÀ
      ìÑïèñ.Î÷èñòèòü(PtrBases);
      unit.typedecl := ÈÑÒÈÍÀ;
      Êëþ÷Ñëåä_Ïîëó÷;
      ÏÎÊÀ ìÑêàí.ñóùíîñòü = lxIDENT ÄÅËÀÒÜ
        IdentDef;
        PushIdent(Name, line, col, IDTYPE, ÏÓÑÒÎ, ÏÓÑÒÎ, Export, 0);
        last := unit.Idents.ñëåäóþù(òóÈìÿ);
        unit.ExportType := Export;
        Êëþ÷_Ïðîâåðèòü(ìÊîíñò.îïÐàâíî);
        Êëþ÷Ñëåä_Ïîëó÷;
        ÍÎÂ(NewType);
        ÏàìÎø_Ïðîâåðèòü(NewType = ÏÓÑÒÎ);
        last.T := NewType;
        T := StructType(ËÎÆÜ, NewType);
        Êëþ÷_Ïðîâåðèòü(ìÊîíñò.îïÒ÷êÇïò);
        Êëþ÷Ñëåä_Ïîëó÷
      ÊÎÍÅÖ
    ÊÎÍÅÖ;
    LinkPtr;
    unit.typedecl := ËÎÆÜ;
    unit.ExportType := ËÎÆÜ;
    ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.êñÏÅÐÅÌ ÒÎÃÄÀ
      Êëþ÷Ñëåä_Ïîëó÷;
      ÏÎÊÀ ìÑêàí.ñóùíîñòü = lxIDENT ÄÅËÀÒÜ
        IdentDef;
        PushIdent(Name, line, col, IDVAR, ÏÓÑÒÎ, ÏÓÑÒÎ, Export, 0);
        ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.îïÇàïÿòàÿ ÒÎÃÄÀ
          Êëþ÷Ñëåä_Ïîëó÷;
          Êëþ÷_Ïðîâåðèòü(lxIDENT)
        ÀÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.îïÄâîåòî÷ ÒÎÃÄÀ
          Êëþ÷Ñëåä_Ïîëó÷;
          Êîîðä_Óñò(line, col);
          T := ParseType(line, col);
          ìÏðîâ.Òåñò(T # ÏÓÑÒÎ, line, col, 42);
          SetVars(T);
          Êëþ÷_Ïðîâåðèòü(ìÊîíñò.îïÒ÷êÇïò);
          Êëþ÷Ñëåä_Ïîëó÷
        ÈÍÀ×Å
          ìÏðîâ.Òåñò2(ËÎÆÜ, 85)
        ÊÎÍÅÖ
      ÊÎÍÅÖ
    ÊÎÍÅÖ;
    ÏÎÊÀ ìÑêàí.ñóùíîñòü = ìÊîíñò.êñÏÐÎÖÅÄÓÐÀ ÄÅËÀÒÜ
      Êëþ÷Ñëåä_Ïîëó÷;
      Êîîðä_Óñò(line, col);
      ÅÑËÈ CallFlag(Call) ÒÎÃÄÀ
        ìÏðîâ.Òåñò(unit.Level = 3, line, col, 45);
        ìÏðîâ.Òåñò(unit.sys, line, col, 111)
      ÊÎÍÅÖ;
      Êëþ÷_Ïðîâåðèòü(lxIDENT);
      IdentDef;
      PushIdent(Name, line, col, IDPROC, Òèï_Ñîçäàòü(TPROC, 0, 4, 0, sttypes[TVOID], ÈÑÒÈÍÀ, ÏÓÑÒÎ), ÏÓÑÒÎ, Export, 0);
      id := unit.Idents.ñëåäóþù(òóÈìÿ);
      ÅÑËÈ id.Export & main ÒÎÃÄÀ
        ÅÑËÈ Platform = 6 ÒÎÃÄÀ
          ìÏðîâ.Òåñò((Name # ìÑêàí._START) & (Name # ìÑêàí._version), line, col, 133)
        ÊÎÍÅÖ;
        X86.ProcExport(id.Number, Name, X86.NewLabel())
      ÊÎÍÅÖ;
      id.Parent := curBlock;
      curBlock := id;
      Îõðàíà_Ñîçäàòü;
      FormalList(ÏÓÑÒÎ, curBlock.T.Base);
      id.T.Call := Call;
      Êëþ÷_Ïðîâåðèòü(ìÊîíñò.îïÒ÷êÇïò);
      Êëþ÷Ñëåä_Ïîëó÷;
      DeclSeq;
      id.LocalSize := id.VarSize - id.ParamSize;
      X86.ProcBeg(id.Number, id.LocalSize, ËÎÆÜ);
      ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.êñÍÀ×ÀËÎ ÒÎÃÄÀ
        Êëþ÷Ñëåä_Ïîëó÷;
        OpSeq
      ÊÎÍÅÖ;
      func := curBlock.T.Base.tType # TVOID;
      ÅÑËÈ func ÒÎÃÄÀ
        Êëþ÷_Ïðîâåðèòü(ìÊîíñò.êñÂÅÐÍÓÒÜ);
        ìÓòèëü.ÊîäÑòðîêà_Óñò(UnitNumber, ìÑêàí.line);
        Êëþ÷Ñëåä_Ïîëó÷;
        Êîîðä_Óñò(line, col);
        Expr(e);
        ìÏðîâ.Òåñò(AssComp(e, curBlock.T.Base, ËÎÆÜ), line, col, 125);
        ÅÑËÈ e.eType = eVAR ÒÎÃÄÀ
          X86.Load(e.T.tType)
        ÊÎÍÅÖ
      ÈÍÀ×Å
        ìÏðîâ.Òåñò2(ìÑêàí.ñóùíîñòü # ìÊîíñò.êñÂÅÐÍÓÒÜ, 123)
      ÊÎÍÅÖ;
      Êëþ÷_Ïðîâåðèòü(ìÊîíñò.êñÊÎÍÅÖ);
      Êëþ÷Ñëåä_Ïîëó÷;
      Êëþ÷_Ïðîâåðèòü(lxIDENT);
      ìÏðîâ.Òåñò2(ìÑêàí.id = Name, 87);
      Êëþ÷Ñëåä_Ïîëó÷;
      Êëþ÷_Ïðîâåðèòü(ìÊîíñò.îïÒ÷êÇïò);
      Êëþ÷Ñëåä_Ïîëó÷;
      X86.ProcEnd(id.Number, (id.ParamSize + (id.Level - 3) * 4) * ORD(curBlock.T.Call IN {stdcall, winapi, defcall}), func, curBlock.T.Base.tType IN {TREAL, TLONGREAL});
      PopBlock;
      curBlock := curBlock.Parent
    ÊÎÍÅÖ
  ÊÎÍÅÖ DeclSeq;

ÏÐÎÖÅÄÓÐÀ Rtl_Äîáàâ(u: òÌîäóëü);

    ÏÐÎÖÅÄÓÐÀ AddProc(name: ìÑòð.òÑòðîêà; num: ÖÅËÎÅ);
      ÏÅÐÅÌ
        id: òóÈìÿ;
      ÍÀ×ÀËÎ
        id := GetQIdent(u, ìÑêàí.Óçåë_Äîáàâ(name));
        ÅÑËÈ id = ÏÓÑÒÎ ÒÎÃÄÀ
          ìÎø.Ñîîáù(158);
          ìÏðîö.Çàêîí÷èòü(1)
        ÊÎÍÅÖ;
        X86.AddRtlProc(num, id.Number)
      ÊÎÍÅÖ AddProc;

  ÍÀ×ÀËÎ
    AddProc("_newrec", X86._newrec);
    AddProc("_disprec", X86._disprec);
    AddProc("_rset", X86._rset);
    AddProc("_inset", X86._inset);
    AddProc("_saverec", X86._saverec);
    AddProc("_checktype", X86._checktype);
    AddProc("_strcmp", X86._strcmp);
    AddProc("_lstrcmp", X86._lstrcmp);
    AddProc("_rstrcmp", X86._rstrcmp);
    AddProc("_savearr", X86._savearr);
    AddProc("_arrayidx", X86._arrayidx);
    AddProc("_arrayidx1", X86._arrayidx1);
    AddProc("_arrayrot", X86._arrayrot);
    AddProc("_assrt", X86._assrt);
    AddProc("_strcopy", X86._strcopy);
    AddProc("_init", X86._init);
    AddProc("_close", X86._close);
    AddProc("_halt", X86._halt);
    AddProc("_length", X86._length);
  ÊÎÍÅÖ Rtl_Äîáàâ;

ÏÐÎÖÅÄÓÐÀ ImportList;
  ÏÅÐÅÌ
    cond, col, line, namecol, nameline: ÖÅËÎÅ;
    name, alias: ìÒèïû.òóÓçåë;
    u, self: òÌîäóëü;
    FName: ìÑòð.òÑòðîêà;

  ÏÐÎÖÅÄÓÐÀ Ìîäóëü_Äîáàâèòü(newcond: ÖÅËÎÅ);
    ÏÅÐÅÌ
      str: òóÏóíêòÑòð;
    ÍÀ×ÀËÎ
      u := Ìîäóëü_Ïîëó÷(name);
      ÅÑËÈ u = ÏÓÑÒÎ ÒÎÃÄÀ
        self := unit;
        ìÑêàí.Ñîõðàíèòü(unit.scanner);
        COPY(name.èìÿ, FName);
        ÅÑËÈ ~((~self.Std & ïÌîäóëü_×èòàòü(Path, FName, ìÊîíñò.ðàñøèð)) ÈËÈ
                            ïÌîäóëü_×èòàòü(Std, FName, ìÊîíñò.ðàñøèð)) ÒÎÃÄÀ
          ÅÑËÈ FName = "SYSTEM" ÒÎÃÄÀ
            unit := sys;
            self.sys := ÈÑÒÈÍÀ
          ÈÍÀ×Å
            ìÏðîâ.Òåñò(ËÎÆÜ, nameline, namecol, 32)
          ÊÎÍÅÖ
        ÊÎÍÅÖ;
        ìÑêàí.Îòêàòèòü(self.scanner);
        u := unit;
        unit := self;
        ìÔàéë.Èìÿ_Óñò(unit.File)
      ÈÍÀ×Å
        ìÏðîâ.Òåñò(u.Closed, nameline, namecol, 31)
      ÊÎÍÅÖ;
      PushIdent(alias, line, col, IDMOD, sttypes[TVOID], u, ËÎÆÜ, 0);
      ÍÎÂ(str);
      ÏàìÎø_Ïðîâåðèòü(str = ÏÓÑÒÎ);
      str.Str := name.èìÿ;
      ìÑïèñ.Äîáàâèòü(unit.Import, str);
      cond := newcond
    ÊÎÍÅÖ Ìîäóëü_Äîáàâèòü;

  ÍÀ×ÀËÎ
    cond := 0;
    ÏÎÊÀ cond # 4 ÄÅËÀÒÜ
      Êëþ÷Ñëåä_Ïîëó÷;
      ÂÛÁÎÐ cond ÈÇ
      |0: Êëþ÷_Ïðîâåðèòü(lxIDENT);
          name := ìÑêàí.id;
          Êîîðä_Óñò(line, col);
          Êîîðä_Óñò(nameline, namecol);
          alias := name;
          cond := 1
      |1: ÂÛÁÎÐ ìÑêàí.ñóùíîñòü ÈÇ
          |ìÊîíñò.îïÇàïÿòàÿ:  Ìîäóëü_Äîáàâèòü(0)
          |ìÊîíñò.îïÒ÷êÇïò:   Ìîäóëü_Äîáàâèòü(4); Êëþ÷Ñëåä_Ïîëó÷
          |lxAssign: cond := 2
          ÈÍÀ×Å
            ìÏðîâ.Òåñò2(ËÎÆÜ, 28)
          ÊÎÍÅÖ
      |2: Êëþ÷_Ïðîâåðèòü(lxIDENT);
          name := ìÑêàí.id;
          Êîîðä_Óñò(nameline, namecol);
          cond := 3
      |3: ÂÛÁÎÐ ìÑêàí.ñóùíîñòü ÈÇ
          |ìÊîíñò.îïÇàïÿòàÿ: Ìîäóëü_Äîáàâèòü(0)
          |ìÊîíñò.îïÒ÷êÇïò:  Ìîäóëü_Äîáàâèòü(4); Êëþ÷Ñëåä_Ïîëó÷
          ÈÍÀ×Å
            ìÏðîâ.Òåñò2(ËÎÆÜ, 29)
          ÊÎÍÅÖ
      ÈÍÀ×Å
      ÊÎÍÅÖ
    ÊÎÍÅÖ
  ÊÎÍÅÖ ImportList;

ÏÐÎÖÅÄÓÐÀ Header(Name: ìÒèïû.òóÓçåë);
  ÍÀ×ÀËÎ
    ÍÎÂ(unit);
    ÏàìÎø_Ïðîâåðèòü(unit = ÏÓÑÒÎ);
    unit.Idents := ìÑïèñ.Ñîçäàòü();
    ÏàìÎø_Ïðîâåðèòü(unit.Idents = ÏÓÑÒÎ);
    unit.Level := 0;
    unit.Name := Name;
    Îõðàíà_Ñîçäàòü;
    Îõðàíà_Ñîçäàòü;
    PushIdent(unit.Name, 0, 0, IDMOD, sttypes[TVOID], unit, ËÎÆÜ, 0);
    Îõðàíà_Ñîçäàòü;
    unit.IdentBegin := unit.Idents.ñëåäóþù(òóÈìÿ);
    unit.Closed := ÈÑÒÈÍÀ
  ÊÎÍÅÖ Header;

ÏÐÎÖÅÄÓÐÀ Ïñåâäî_Äîáàâ;
  ÏÅÐÅÌ
    ìîäóëü: òÌîäóëü;
  ÍÀ×ÀËÎ
    ìîäóëü := unit;
    Header(ìÑêàí.Óçåë_Äîáàâ("SYSTEM"));
    PushSysProc("ADR",     sysADR);
    PushSysProc("SIZE",    sysSIZE);
    PushSysProc("TYPEID",  sysTYPEID);
    PushSysProc("BIT",     sysBIT);
    PushSysProc("GET",     sysGET);
    PushSysProc("PUT",     sysPUT);
    PushSysProc("CODE",    sysCODE);
    PushSysProc("MOVE",    sysMOVE);
    PushSysType("CARD16",  TCARD16);
    sys := unit;
    unit := ìîäóëü
  ÊÎÍÅÖ Ïñåâäî_Äîáàâ;

ÏÐÎÖÅÄÓÐÀ Ìîäóëü_×èòàòü(Path, Name1, Ext: ìÑòð.òÑòðîêà): ÁÓËÅÂÎ;
  ÏÅÐÅÌ
    FHandle: ÖÅËÎÅ;
    name, Name, b: ìÑòð.òÑòðîêà;
    idmod: òóÈìÿ;
    Res, temp: ÁÓËÅÂÎ;
  ÍÀ×ÀËÎ
    Res := ËÎÆÜ;
    name := Name1;
    Name := Name1;
    ìÑòð.Ñëîæèòü(Path, Name, b);
    ìÑòð.Ñëîæèòü(b, Ext, Name);
    ÅÑËÈ ìÑêàí.Ôàéë_Îòêðûòü(Name, FHandle) ÒÎÃÄÀ
      ÍÎÂ(unit);
      ÏàìÎø_Ïðîâåðèòü(unit = ÏÓÑÒÎ);
      unit.sys := ËÎÆÜ;
      unit.Std := Path = Std;
      ìÑïèñ.Äîáàâèòü(prog, unit);
      unit.Idents := ìÑïèñ.Ñîçäàòü();
      ÏàìÎø_Ïðîâåðèòü(unit.Idents = ÏÓÑÒÎ);
      unit.Import := ìÑïèñ.Ñîçäàòü();
      ÏàìÎø_Ïðîâåðèòü(unit.Import = ÏÓÑÒÎ);
      ÍÎÂ(unit.scanner);
      ÏàìÎø_Ïðîâåðèòü(unit.scanner = ÏÓÑÒÎ);
      unit.Closed := ËÎÆÜ;
      unit.Level := 0;
      unit.typedecl := ËÎÆÜ;
      unit.ExportType := ËÎÆÜ;
      COPY(Name, unit.File);
      ìÔàéë.Èìÿ_Óñò(unit.File);
      StIdent;
      Êëþ÷Ñëåä_Ïîëó÷; Êëþ÷_Ïðîâåðèòü(ìÊîíñò.êñÌÎÄÓËÜ);
      
      Êëþ÷Ñëåä_Ïîëó÷; Êëþ÷_Ïðîâåðèòü(lxIDENT);
      ìÏðîâ.Òåñò2(ìÓòèëü.streq(ìÑêàí.id.èìÿ, name), 33);
      unit.Name := ìÑêàí.id;
      PushIdent(unit.Name, ìÑêàí.line, ìÑêàí.col, IDMOD, sttypes[TVOID], unit, ËÎÆÜ, 0);
      idmod := unit.Idents.ñëåäóþù(òóÈìÿ);
      Îõðàíà_Ñîçäàòü;
      Êëþ÷Ñëåä_Ïîëó÷; Êëþ÷_Ïðîâåðèòü(ìÊîíñò.îïÒ÷êÇïò);
      Êëþ÷Ñëåä_Ïîëó÷;
      ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.êñÈÌÏÎÐÒ ÒÎÃÄÀ
        temp := main;
        main := ËÎÆÜ;
        ImportList;
        main := temp
      ÊÎÍÅÖ;
      ìÊîíñ.Ñòðîêà_Ïå÷àòü("Êîìïèëèðóþ: "); ìÊîíñ.Ñòðîêà_Ïå÷àòü(unit.Name.èìÿ); ìÊîíñ.Ñòðîêà_Ïå÷àòü("."); ìÊîíñ.ÍîâÑòð;
      X86.Module(idmod.Name.èìÿ, idmod.Number);
      UnitNumber := idmod.Number;
      unit.IdentBegin := unit.Idents.ñëåäóþù(òóÈìÿ);
      curBlock := idmod;
      DeclSeq;
      X86.ProcBeg(idmod.Number, 0, ÈÑÒÈÍÀ);
      ÅÑËÈ ìÑêàí.ñóùíîñòü = ìÊîíñò.êñÍÀ×ÀËÎ ÒÎÃÄÀ
        Êëþ÷Ñëåä_Ïîëó÷;
        OpSeq
      ÊÎÍÅÖ;
      Êëþ÷_Ïðîâåðèòü(ìÊîíñò.êñÊÎÍÅÖ);
      Êëþ÷Ñëåä_Ïîëó÷; Êëþ÷_Ïðîâåðèòü(lxIDENT);
      ìÏðîâ.Òåñò2(ìÑêàí.id = unit.Name, 26);
      Êëþ÷Ñëåä_Ïîëó÷; Êëþ÷_Ïðîâåðèòü(lxDot);
      X86.Leave;
      unit.Closed := ÈÑÒÈÍÀ;
      ìÑïèñ.Î÷èñòèòü(unit.Import);
      Res := ÈÑÒÈÍÀ
    ÊÎÍÅÖ
    ÂÅÐÍÓÒÜ Res
  ÊÎÍÅÖ Ìîäóëü_×èòàòü;

ÏÐÎÖÅÄÓÐÀ Êîä_Íàñòðîèòü*(StdPath, FilePath, NameFile, ExtFile: ìÑòð.òÑòðîêà; windows: ÁÓËÅÂÎ;
    OpSeqProc: òÏðîöåäóðà; ExprProc: òÏðîöåäóðàÏåð; AssCompProc: òÏðîöåäóðàÑâÿçü; ÏÅÐ stypes: òóÒèïÍàáîð);
  ÍÀ×ÀËÎ
    winplatf := windows;
    Path := FilePath;
    Main := NameFile;
    ExtMain := ExtFile;
    Std := StdPath;
    OpSeq := OpSeqProc;
    Expr := ExprProc;
    AssComp := AssCompProc;
    prog := ìÑïèñ.Ñîçäàòü();
    ÏàìÎø_Ïðîâåðèòü(prog = ÏÓÑÒÎ);
    PtrBases := ìÑïèñ.Ñîçäàòü();
    ÏàìÎø_Ïðîâåðèòü(PtrBases = ÏÓÑÒÎ);
    types := ìÑïèñ.Ñîçäàòü();
    ÏàìÎø_Ïðîâåðèòü(types = ÏÓÑÒÎ);
    StTypes;
    ñòðîêè := ìÑïèñ.Ñîçäàòü();
    ÏàìÎø_Ïðîâåðèòü(ñòðîêè = ÏÓÑÒÎ);
    Ïñåâäî_Äîáàâ;
    stypes := sttypes
  ÊÎÍÅÖ Êîä_Íàñòðîèòü;

ÏÐÎÖÅÄÓÐÀ delfirstchar(ÏÅÐ s: ìÑòð.òÑòðîêà);
  ÏÅÐÅÌ i: ÖÅËÎÅ;
  ÍÀ×ÀËÎ
    ÄËß i := 0 ÄÎ ÄËÈÍÀ(s) - 1 ÄÅËÀÒÜ
      s[i] := s[i + 1]
    ÊÎÍÅÖ
  ÊÎÍÅÖ delfirstchar;

ÏÐÎÖÅÄÓÐÀ Êîìïèëèðîâàòü*(platform, stksize: ÖÅËÎÅ);
  ÏÅÐÅÌ
    full, path, name, ext, temp, path2: ìÑòð.òÑòðîêà;
  ÍÀ×ÀËÎ
    Platform := platform;
    main := ËÎÆÜ;
    ÅÑËÈ Ìîäóëü_×èòàòü(Std, "RTL", ìÊîíñò.ðàñøèð) ÒÎÃÄÀ
      Rtl_Äîáàâ(unit)
    ÈÍÀ×Å
      ìÎø.Ñîîáù(65);
      ìÏðîö.Çàêîí÷èòü(1)
    ÊÎÍÅÖ;
    main := ÈÑÒÈÍÀ;
    ÅÑËÈ ~Ìîäóëü_×èòàòü(Path, Main, ExtMain) ÒÎÃÄÀ
      path2 := Path;
      ìÓòèëü.ÑòðÏàðàì(full, 0);
      ìÑòð.Ðàçäåëèòü(full, path, name, ext);
      ÅÑËÈ path[0] # 0X ÒÎÃÄÀ
        path[ÄËÈÍÀ(path) - 1] := 0X
      ÊÎÍÅÖ;
      ÅÑËÈ Path[0] = ìÊîíñò.ñëýø ÒÎÃÄÀ
        delfirstchar(Path)
      ÊÎÍÅÖ;
      ìÑòð.Ñëîæèòü(path, ìÊîíñò.ñëýø, path);
      ìÑòð.Ñëîæèòü(path, Path, full);
      Path := full;
      ÅÑËÈ (ìÊîíñò.ÎÑ = "WIN") & (Path[0] = ìÊîíñò.ñëýø) ÒÎÃÄÀ
        delfirstchar(Path)
      ÊÎÍÅÖ;
      ÅÑËÈ ~Ìîäóëü_×èòàòü(Path, Main, ExtMain) ÒÎÃÄÀ
        ìÎø.Ñîîáù(64);
        ìÊîíñ.Ñòðîêà_Ïå÷àòü(path2);
        ìÊîíñ.Ñòðîêà_Ïå÷àòü(Main);
        ìÊîíñ.Ñòðîêà_Ïå÷àòü(ExtMain);
        ìÊîíñ.ÍîâÑòð;
        ìÏðîö.Çàêîí÷èòü(1)
      ÊÎÍÅÖ
    ÊÎÍÅÖ;
    temp := Path;
    ìÑòð.Ñëîæèòü(temp, Main, temp);
    ÅÑËÈ platform IN {2, 3} ÒÎÃÄÀ
      ìÑòð.Ñëîæèòü(temp, ".exe", temp)
    ÀÅÑËÈ platform = 1 ÒÎÃÄÀ
      ìÑòð.Ñëîæèòü(temp, ".dll", temp)
    ÀÅÑËÈ platform = 4 ÒÎÃÄÀ
      ìÑòð.Ñëîæèòü(temp, ".kex", temp)
    ÀÅÑËÈ platform = 6 ÒÎÃÄÀ
      ìÑòð.Ñëîæèòü(temp, ".obj", temp)
    ÊÎÍÅÖ;
    ÅÑËÈ platform IN {1, 2, 3, 4} ÒÎÃÄÀ
      stksize := stksize * 100000H
    ÊÎÍÅÖ;
    X86.Epilog(ProgSize, temp, stksize)
  ÊÎÍÅÖ Êîìïèëèðîâàòü;

ÍÀ×ÀËÎ
  pParseType := ParseType;
  ïÌîäóëü_×èòàòü := Ìîäóëü_×èòàòü
ÊÎÍÅÖ ìîäÄåöë.
