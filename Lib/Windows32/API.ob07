(*
   Copyright 2013 Krotov Anton

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
*)

лндскэ API;

хлонпр sys := SYSTEM;

йнмяр

  OS* = "WIN";
  Slash* = "\";

  OFS_MAXPATHNAME = 128;

рхош

   OFSTRUCT* = гюохяэ
      cBytes: яхлб;
      fFixedDisk: яхлб;
      nErrCode: sys.CARD16;
      Reserved1: sys.CARD16;
      Reserved2: sys.CARD16;
      szPathName: люяяхб OFS_MAXPATHNAME хг яхлб
   йнмеж;

оепел

   sec*, dsec*: жекне;

   GetStdHandle*: опнжедспю [winapi] (nStdHandle: INTEGER): жекне;
   CloseHandle*: опнжедспю [winapi] (hObject: жекне): жекне;
   CreateFile*: опнжедспю [winapi] (lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes,
   dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile: жекне): жекне;
   OpenFile*: опнжедспю [winapi] (lpFileName: жекне; lpReOpenBuff: OFSTRUCT; uStyle: жекне): жекне;
   ReadFile*, WriteFile*: опнжедспю [winapi] (hFile, Buffer, nNumberOfBytesToRead, lpNumberOfBytesRead, lpOverlapped: жекне): жекне;
   GetCommandLine*: опнжедспю [winapi] (): жекне;
   GetTickCount*: опнжедспю [winapi] (): жекне;
   Alloc*: опнжедспю [winapi] (uFlags, dwBytes: жекне): INTEGER;
   Free*: опнжедспю [winapi] (hMem: жекне): INTEGER;
   MessageBoxA*: опнжедспю [winapi] (hWnd, lpText, lpCaption, uType: жекне): жекне;
   ExitProcess*: опнжедспю [winapi] (code: жекне);
   SetFilePointer*: опнжедспю [winapi] (hFile, lDistanceToMove, lpDistanceToMoveHigh, dwMoveMethod: жекне): жекне;
   strncmp*: опнжедспю [cdecl] (a, b, n: жекне): жекне;

   GetProcAddress*: опнжедспю [winapi] (hModule, name: жекне): жекне;
   LoadLibraryA*: опнжедспю [winapi] (name: INTEGER): жекне;

   kos_OCFile*: опнжедспю (FName: ARRAY OF CHAR; mode: жекне; оеп memerr: BOOLEAN): жекне;
   GetName*: опнжедспю (): INTEGER;
   lnx_CreateFile*: опнжедспю (FName: ARRAY OF CHAR): жекне;
   lnx_OpenFile*: опнжедспю (FName: ARRAY OF CHAR): жекне;

опнжедспю zeromem*(size, adr: INTEGER);
   йнмеж zeromem;

опнжедспю DebugMsg*(lpText, lpCaption: жекне);
   мювюкн
      MessageBoxA(0, lpText, lpCaption, 16)
   йнмеж DebugMsg;

опнжедспю FileSize*(F: жекне): жекне;
   оепел
      res: INTEGER;
   мювюкн
      res := SetFilePointer(F, 0, 0, 2);
      SetFilePointer(F, 0, 0, 0)
      RETURN res
   йнмеж FileSize;

опнжедспю GetProc(name: ARRAY OF CHAR; hMOD, adr: жекне);
   оепел
      H: INTEGER;
   мювюкн
      H := GetProcAddress(hMOD, sys.ADR(name[0]));
      ASSERT(H # 0);
      sys.PUT(adr, H);
   йнмеж GetProc;

опнжедспю Time*(оеп sec, dsec: жекне);
   оепел
      t: INTEGER;
   мювюкн
     t := GetTickCount() DIV 10;
     sec := t DIV 100;
     dsec := t MOD 100
   йнмеж Time;

опнжедспю _NEW*(size: жекне): жекне;
     RETURN Alloc(64, size)
   йнмеж _NEW;

опнжедспю _DISPOSE*(p: жекне): жекне;
     RETURN Free(p)
   йнмеж _DISPOSE;

опнжедспю init* (esp: жекне);
   оепел
      lib, p: жекне;
   мювюкн
     sys.MOVE(esp, sys.ADR(GetProcAddress), 4);
     sys.MOVE(esp + 4, sys.ADR(LoadLibraryA), 4);

     lib := LoadLibraryA(sys.ADR("kernel32.dll"));
     GetProc("GetTickCount", lib, sys.ADR(GetTickCount));

     Time(sec, dsec);

     GetProc("GetStdHandle", lib, sys.ADR(GetStdHandle));
     GetProc("CreateFileA", lib, sys.ADR(CreateFile));
     GetProc("CloseHandle", lib, sys.ADR(CloseHandle));
     GetProc("OpenFile", lib, sys.ADR(OpenFile));
     GetProc("ReadFile", lib, sys.ADR(ReadFile));
     GetProc("WriteFile", lib, sys.ADR(WriteFile));
     GetProc("GetCommandLineA", lib, sys.ADR(GetCommandLine));
     GetProc("ExitProcess", lib, sys.ADR(ExitProcess));
     GetProc("GlobalAlloc", lib, sys.ADR(Alloc));
     GetProc("GlobalFree", lib, sys.ADR(Free));
     GetProc("SetFilePointer", lib, sys.ADR(SetFilePointer));

     lib := LoadLibraryA(sys.ADR("msvcrt.dll"));
     GetProc("strncmp", lib, sys.ADR(strncmp));

     lib := LoadLibraryA(sys.ADR("user32.dll"));
     GetProc("MessageBoxA", lib, sys.ADR(MessageBoxA));
   йнмеж init;

йнмеж API.
