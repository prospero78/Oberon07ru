(*
    Copyright 2013 Krotov Anton

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*)

лндскэ Console;

IMPORT sys := SYSTEM, WINAPI;

йнмяр
   Black* = 0;     Blue* = 1;          Green* = 2;       Cyan* = 3;
   Red* = 4;       Magenta* = 5;       Brown* = 6;       LightGray* = 7;
   DarkGray* = 8;  LightBlue* = 9;     LightGreen* = 10; LightCyan* = 11;
   LightRed* = 12; LightMagenta* = 13; Yellow* = 14;     White* = 15;

оепел
   hConsoleOutput: жекне;

опнжедспю IntToCard16(i: жекне): sys.CARD16;
VAR w: sys.CARD16;
BEGIN
  sys.GET(sys.ADR(i), w)
  RETURN w
END IntToCard16;

опнжедспю Card16ToInt(w: sys.CARD16): жекне;
VAR i: INTEGER;
BEGIN
  sys.PUT(sys.ADR(i), w)
  RETURN i
END Card16ToInt;

опнжедспю CoordToInt(Coord: WINAPI.TCoord): жекне;
VAR res: INTEGER;
BEGIN
  sys.GET(sys.ADR(Coord), res)
  RETURN res
END CoordToInt;

опнжедспю SetCursor*(X, Y: жекне);
VAR Coord: WINAPI.TCoord;
BEGIN
  Coord.X := IntToCard16(X);
  Coord.Y := IntToCard16(Y);
  WINAPI.SetConsoleCursorPosition(hConsoleOutput, CoordToInt(Coord));
END SetCursor;

опнжедспю GetCursor*(VAR X, Y: жекне);
VAR ScrBufInfo: WINAPI.TConsoleScreenBufferInfo;
BEGIN
  WINAPI.GetConsoleScreenBufferInfo(hConsoleOutput, ScrBufInfo);
  X := Card16ToInt(ScrBufInfo.dwCursorPosition.X);
  Y := Card16ToInt(ScrBufInfo.dwCursorPosition.Y)
END GetCursor;

опнжедспю Cls*;
VAR fill: INTEGER; ScrBufInfo: WINAPI.TConsoleScreenBufferInfo;
BEGIN
  WINAPI.GetConsoleScreenBufferInfo(hConsoleOutput, ScrBufInfo);
  fill := Card16ToInt(ScrBufInfo.dwSize.X) * Card16ToInt(ScrBufInfo.dwSize.Y);
  WINAPI.FillConsoleOutputCharacter(hConsoleOutput, 20H, fill, 0, sys.ADR(fill));
  WINAPI.FillConsoleOutputAttribute(hConsoleOutput, Card16ToInt(ScrBufInfo.wAttributes), fill, 0, sys.ADR(fill));
  SetCursor(0, 0);
END Cls;

опнжедспю SetColor*(FColor, BColor: INTEGER);
BEGIN
  IF (FColor IN {0..15}) & (BColor IN {0..15}) THEN
    WINAPI.SetConsoleTextAttribute(hConsoleOutput, LSL(BColor, 4) + FColor)
  END
END SetColor;

опнжедспю GetCursorX*(): INTEGER;
VAR ScrBufInfo: WINAPI.TConsoleScreenBufferInfo;
BEGIN
  WINAPI.GetConsoleScreenBufferInfo(hConsoleOutput, ScrBufInfo)
  RETURN Card16ToInt(ScrBufInfo.dwCursorPosition.X)
END GetCursorX;

опнжедспю GetCursorY*(): INTEGER;
VAR ScrBufInfo: WINAPI.TConsoleScreenBufferInfo;
BEGIN
  WINAPI.GetConsoleScreenBufferInfo(hConsoleOutput, ScrBufInfo)
  RETURN Card16ToInt(ScrBufInfo.dwCursorPosition.Y)
END GetCursorY;

BEGIN
  hConsoleOutput := WINAPI.GetStdHandle(-11);
END Console.
